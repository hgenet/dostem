/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


				#include "data\BgcData.h"
				#include "data\CohortData.h"
				#include "data\EnvData.h"
				#include "data\FirData.h"
				#include "data\GridData.h"
				#include "data\RegionData.h"
				#include "data\RestartData.h"
			

				#include "inc\cohortconst.h"
				#include "inc\cohortkey.h"
				#include "inc\diagnostics.h"
				#include "inc\ErrorCode.h"
				#include "inc\fluxes.h"
				#include "inc\layerconst.h"
				#include "inc\parameters.h"
				#include "inc\PhysicalConstants.h"
				#include "inc\runmode.h"
				#include "inc\states.h"
				#include "inc\temconst.h"
				#include "inc\timeconst.h"
			

				#include "lookup\CohortLookup.h"
				#include "lookup\SoilLookup.h"
			

				#include "run\AtmOutData.h"
				#include "run\Cohort.h"
				#include "run\Controller.h"
				#include "run\Grid.h"
				#include "run\ModelData.h"
				#include "run\RegnOutData.h"
				#include "run\SiteIn.h"
				#include "run\SnowSoilOutData.h"
				#include "run\Timer.h"
				#include "run\VegOutData.h"
			

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1BgcData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BgcData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BgcData *)new BgcData();
  *(BgcData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1BgcData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BgcData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *arg2 = (vegstate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegstate_bgc **)&jarg2; 
  if (arg1) (arg1)->m_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegstate_bgc *)& ((arg1)->m_vegs);
  *(vegstate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *arg2 = (soistate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soistate_bgc **)&jarg2; 
  if (arg1) (arg1)->m_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soistate_bgc *)& ((arg1)->m_sois);
  *(soistate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *arg2 = (vegdiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegdiag_bgc **)&jarg2; 
  if (arg1) (arg1)->m_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegdiag_bgc *)& ((arg1)->m_vegd);
  *(vegdiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *arg2 = (soidiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soidiag_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soidiag_bgc *)& ((arg1)->m_soid);
  *(soidiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *arg2 = (lnd2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(lnd2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->m_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (lnd2atm_bgc *)& ((arg1)->m_l2a);
  *(lnd2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *arg2 = (atm2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->m_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2veg_bgc *)& ((arg1)->m_a2v);
  *(atm2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *arg2 = (veg2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->m_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2atm_bgc *)& ((arg1)->m_v2a);
  *(veg2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *arg2 = (veg2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->m_v2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2soi_bgc *)& ((arg1)->m_v2soi);
  *(veg2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *arg2 = (soi2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2veg_bgc *)& ((arg1)->m_soi2v);
  *(soi2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *arg2 = (veg2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->m_v2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2veg_bgc *)& ((arg1)->m_v2v);
  *(veg2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *arg2 = (soi2lnd_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2lnd_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2lnd_bgc *)& ((arg1)->m_soi2l);
  *(soi2lnd_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *arg2 = (soi2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2atm_bgc *)& ((arg1)->m_soi2a);
  *(soi2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *arg2 = (atm2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->m_a2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2soi_bgc *)& ((arg1)->m_a2soi);
  *(atm2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *arg2 = (soi2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2soi_bgc *)& ((arg1)->m_soi2soi);
  *(soi2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *arg2 = (vegstate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegstate_bgc **)&jarg2; 
  if (arg1) (arg1)->y_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegstate_bgc *)& ((arg1)->y_vegs);
  *(vegstate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *arg2 = (soistate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soistate_bgc **)&jarg2; 
  if (arg1) (arg1)->y_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soistate_bgc *)& ((arg1)->y_sois);
  *(soistate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *arg2 = (vegdiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegdiag_bgc **)&jarg2; 
  if (arg1) (arg1)->y_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegdiag_bgc *)& ((arg1)->y_vegd);
  *(vegdiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *arg2 = (soidiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soidiag_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soidiag_bgc *)& ((arg1)->y_soid);
  *(soidiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *arg2 = (lnd2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(lnd2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->y_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (lnd2atm_bgc *)& ((arg1)->y_l2a);
  *(lnd2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *arg2 = (atm2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->y_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2veg_bgc *)& ((arg1)->y_a2v);
  *(atm2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *arg2 = (veg2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->y_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2atm_bgc *)& ((arg1)->y_v2a);
  *(veg2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *arg2 = (veg2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->y_v2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2soi_bgc *)& ((arg1)->y_v2soi);
  *(veg2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *arg2 = (soi2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2veg_bgc *)& ((arg1)->y_soi2v);
  *(soi2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *arg2 = (veg2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->y_v2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2veg_bgc *)& ((arg1)->y_v2v);
  *(veg2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *arg2 = (soi2lnd_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2lnd_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2lnd_bgc *)& ((arg1)->y_soi2l);
  *(soi2lnd_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *arg2 = (soi2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2atm_bgc *)& ((arg1)->y_soi2a);
  *(soi2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *arg2 = (atm2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->y_a2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2soi_bgc *)& ((arg1)->y_a2soi);
  *(atm2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *arg2 = (soi2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2soi_bgc *)& ((arg1)->y_soi2soi);
  *(soi2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1toptque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  deque< double > arg2 ;
  deque< double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  argp2 = *(deque< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null deque< double >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->toptque = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1toptque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  deque< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result =  ((arg1)->toptque);
  *(deque< double > **)&jresult = new deque< double >((const deque< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1unleafmxque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  deque< double > arg2 ;
  deque< double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  argp2 = *(deque< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null deque< double >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->unleafmxque = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1unleafmxque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  deque< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result =  ((arg1)->unleafmxque);
  *(deque< double > **)&jresult = new deque< double >((const deque< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1foliagemx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->foliagemx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1foliagemx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->foliagemx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1topt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->topt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1topt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->topt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1unleafmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->unleafmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1unleafmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->unleafmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1prvunleafmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prvunleafmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1prvunleafmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->prvunleafmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1prvtopt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prvtopt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1prvtopt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->prvtopt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1c2n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->c2n = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1c2n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->c2n);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdfib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdfib = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdfib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->kdfib);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdhum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdhum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdhum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->kdhum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->kdmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdslow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdslow = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_BgcData_1kdslow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (double) ((arg1)->kdslow);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->beginOfMonth((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->endOfMonth((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1endOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->endOfYear((double const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1setEnvData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  (arg1)->setEnvData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1baseline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->baseline = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BgcData_1baseline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (int) ((arg1)->baseline);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1nfeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nfeed = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BgcData_1nfeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (int) ((arg1)->nfeed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1avlnflg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->avlnflg = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BgcData_1avlnflg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (int) ((arg1)->avlnflg);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (GridData *) ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (CohortData *) ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1CohortData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CohortData *)new CohortData();
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1CohortData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CohortData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1grdid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->grdid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1grdid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->grdid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1clmid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->clmid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1clmid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->clmid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trchtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trchtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trchtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->trchtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1eqchtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eqchtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1eqchtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->eqchtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spchtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spchtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spchtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->spchtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1scchtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scchtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1scchtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->scchtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1reschtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->reschtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1reschtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->reschtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1drgtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->drgtype = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1drgtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->drgtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vegtype = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->vegtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trfireyear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_TR_FIR_OCR_NUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->trfireyear;
    for (ii = 0; ii < (size_t)MAX_TR_FIR_OCR_NUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trfireyear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->trfireyear);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_TR_FIR_OCR_NUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trseason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_TR_FIR_OCR_NUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->trseason;
    for (ii = 0; ii < (size_t)MAX_TR_FIR_OCR_NUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trseason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->trseason);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_TR_FIR_OCR_NUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trseverity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_TR_FIR_OCR_NUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->trseverity;
    for (ii = 0; ii < (size_t)MAX_TR_FIR_OCR_NUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1trseverity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->trseverity);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_TR_FIR_OCR_NUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spfireyear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SP_FIR_OCR_NUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->spfireyear;
    for (ii = 0; ii < (size_t)MAX_SP_FIR_OCR_NUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spfireyear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->spfireyear);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SP_FIR_OCR_NUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spseason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SP_FIR_OCR_NUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->spseason;
    for (ii = 0; ii < (size_t)MAX_SP_FIR_OCR_NUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spseason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->spseason);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SP_FIR_OCR_NUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spseverity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SP_FIR_OCR_NUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->spseverity;
    for (ii = 0; ii < (size_t)MAX_SP_FIR_OCR_NUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1spseverity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->spseverity);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SP_FIR_OCR_NUM); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1EnvData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EnvData *)new EnvData();
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1EnvData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EnvData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1daylengths_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 365) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->daylengths;
    for (ii = 0; ii < (size_t)365; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1daylengths_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->daylengths);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 365); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *arg2 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmstate_env **)&jarg2; 
  if (arg1) (arg1)->d_atms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmstate_env *)& ((arg1)->d_atms);
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *arg2 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegstate_env **)&jarg2; 
  if (arg1) (arg1)->d_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegstate_env *)& ((arg1)->d_vegs);
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *arg2 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwstate_env **)&jarg2; 
  if (arg1) (arg1)->d_snws = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwstate_env *)& ((arg1)->d_snws);
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *arg2 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soistate_env **)&jarg2; 
  if (arg1) (arg1)->d_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soistate_env *)& ((arg1)->d_sois);
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atmd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *arg2 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmdiag_env **)&jarg2; 
  if (arg1) (arg1)->d_atmd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atmd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmdiag_env *)& ((arg1)->d_atmd);
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *arg2 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegdiag_env **)&jarg2; 
  if (arg1) (arg1)->d_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegdiag_env *)& ((arg1)->d_vegd);
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *arg2 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwdiag_env **)&jarg2; 
  if (arg1) (arg1)->d_snwd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwdiag_env *)& ((arg1)->d_snwd);
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *arg2 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soidiag_env **)&jarg2; 
  if (arg1) (arg1)->d_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soidiag_env *)& ((arg1)->d_soid);
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *arg2 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2atm_env *)& ((arg1)->d_l2a);
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *arg2 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2lnd_env **)&jarg2; 
  if (arg1) (arg1)->d_a2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2lnd_env *)& ((arg1)->d_a2l);
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *arg2 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2veg_env **)&jarg2; 
  if (arg1) (arg1)->d_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2veg_env *)& ((arg1)->d_a2v);
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *arg2 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2atm_env *)& ((arg1)->d_v2a);
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *arg2 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2gnd_env **)&jarg2; 
  if (arg1) (arg1)->d_v2g = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2gnd_env *)& ((arg1)->d_v2g);
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1l2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2soi_env *arg2 = (lnd2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2soi_env **)&jarg2; 
  if (arg1) (arg1)->d_l2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1l2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2soi_env *)& ((arg1)->d_l2soi);
  *(lnd2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *arg2 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2lnd_env **)&jarg2; 
  if (arg1) (arg1)->d_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2lnd_env *)& ((arg1)->d_soi2l);
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *arg2 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2atm_env *)& ((arg1)->d_soi2a);
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *arg2 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_snw2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2atm_env *)& ((arg1)->d_snw2a);
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *arg2 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2soi_env **)&jarg2; 
  if (arg1) (arg1)->d_snw2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2soi_env *)& ((arg1)->d_snw2soi);
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *arg2 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmstate_env **)&jarg2; 
  if (arg1) (arg1)->m_atms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmstate_env *)& ((arg1)->m_atms);
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *arg2 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegstate_env **)&jarg2; 
  if (arg1) (arg1)->m_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegstate_env *)& ((arg1)->m_vegs);
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *arg2 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwstate_env **)&jarg2; 
  if (arg1) (arg1)->m_snws = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwstate_env *)& ((arg1)->m_snws);
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *arg2 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soistate_env **)&jarg2; 
  if (arg1) (arg1)->m_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soistate_env *)& ((arg1)->m_sois);
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atmd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *arg2 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmdiag_env **)&jarg2; 
  if (arg1) (arg1)->m_atmd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atmd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmdiag_env *)& ((arg1)->m_atmd);
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *arg2 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegdiag_env **)&jarg2; 
  if (arg1) (arg1)->m_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegdiag_env *)& ((arg1)->m_vegd);
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *arg2 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwdiag_env **)&jarg2; 
  if (arg1) (arg1)->m_snwd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwdiag_env *)& ((arg1)->m_snwd);
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *arg2 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soidiag_env **)&jarg2; 
  if (arg1) (arg1)->m_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soidiag_env *)& ((arg1)->m_soid);
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *arg2 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2atm_env *)& ((arg1)->m_l2a);
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *arg2 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2lnd_env **)&jarg2; 
  if (arg1) (arg1)->m_a2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2lnd_env *)& ((arg1)->m_a2l);
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *arg2 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2veg_env **)&jarg2; 
  if (arg1) (arg1)->m_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2veg_env *)& ((arg1)->m_a2v);
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *arg2 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2atm_env *)& ((arg1)->m_v2a);
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *arg2 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2gnd_env **)&jarg2; 
  if (arg1) (arg1)->m_v2g = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2gnd_env *)& ((arg1)->m_v2g);
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1l2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2soi_env *arg2 = (lnd2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2soi_env **)&jarg2; 
  if (arg1) (arg1)->m_l2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1l2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2soi_env *)& ((arg1)->m_l2soi);
  *(lnd2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *arg2 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2lnd_env **)&jarg2; 
  if (arg1) (arg1)->m_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2lnd_env *)& ((arg1)->m_soi2l);
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *arg2 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2atm_env *)& ((arg1)->m_soi2a);
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *arg2 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_snw2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2atm_env *)& ((arg1)->m_snw2a);
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *arg2 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2soi_env **)&jarg2; 
  if (arg1) (arg1)->m_snw2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2soi_env *)& ((arg1)->m_snw2soi);
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *arg2 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmstate_env **)&jarg2; 
  if (arg1) (arg1)->y_atms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmstate_env *)& ((arg1)->y_atms);
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *arg2 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegstate_env **)&jarg2; 
  if (arg1) (arg1)->y_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegstate_env *)& ((arg1)->y_vegs);
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *arg2 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwstate_env **)&jarg2; 
  if (arg1) (arg1)->y_snws = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwstate_env *)& ((arg1)->y_snws);
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *arg2 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soistate_env **)&jarg2; 
  if (arg1) (arg1)->y_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soistate_env *)& ((arg1)->y_sois);
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atmd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *arg2 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmdiag_env **)&jarg2; 
  if (arg1) (arg1)->y_atmd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atmd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmdiag_env *)& ((arg1)->y_atmd);
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *arg2 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegdiag_env **)&jarg2; 
  if (arg1) (arg1)->y_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegdiag_env *)& ((arg1)->y_vegd);
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *arg2 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwdiag_env **)&jarg2; 
  if (arg1) (arg1)->y_snwd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwdiag_env *)& ((arg1)->y_snwd);
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *arg2 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soidiag_env **)&jarg2; 
  if (arg1) (arg1)->y_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soidiag_env *)& ((arg1)->y_soid);
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *arg2 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2atm_env *)& ((arg1)->y_l2a);
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *arg2 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2lnd_env **)&jarg2; 
  if (arg1) (arg1)->y_a2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2lnd_env *)& ((arg1)->y_a2l);
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *arg2 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2veg_env **)&jarg2; 
  if (arg1) (arg1)->y_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2veg_env *)& ((arg1)->y_a2v);
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *arg2 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2atm_env *)& ((arg1)->y_v2a);
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *arg2 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2gnd_env **)&jarg2; 
  if (arg1) (arg1)->y_v2g = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2gnd_env *)& ((arg1)->y_v2g);
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1l2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2soi_env *arg2 = (lnd2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2soi_env **)&jarg2; 
  if (arg1) (arg1)->y_l2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1l2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2soi_env *)& ((arg1)->y_l2soi);
  *(lnd2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *arg2 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2lnd_env **)&jarg2; 
  if (arg1) (arg1)->y_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2lnd_env *)& ((arg1)->y_soi2l);
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *arg2 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2atm_env *)& ((arg1)->y_soi2a);
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *arg2 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_snw2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2atm_env *)& ((arg1)->y_snw2a);
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *arg2 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2soi_env **)&jarg2; 
  if (arg1) (arg1)->y_snw2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2soi_env *)& ((arg1)->y_snw2soi);
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eetmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->eetmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1petmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->petmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1petmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->petmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1prveetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prveetmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1prveetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->prveetmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1prvpetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prvpetmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1prvpetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->prvpetmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1initco2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initco2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1initco2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->initco2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1permafrost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->permafrost = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_EnvData_1permafrost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (int) ((arg1)->permafrost);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1ald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y_ald = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1ald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->y_ald);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1ald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ald = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1ald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->m_ald);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1ald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->d_ald = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1ald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->d_ald);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1yrfrozensoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yrfrozensoil = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1yrfrozensoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->yrfrozensoil);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1beginOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->beginOfDay();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->beginOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1endOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  EnvData *arg1 = (EnvData *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->endOfDay((int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  EnvData *arg1 = (EnvData *) 0 ;
  int *arg2 = 0 ;
  bool *arg3 = 0 ;
  int temp2 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->endOfMonth((int const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1endOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->endOfYear((bool const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double (*arg2)[MAX_SOI_LAY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(double (**)[MAX_SOI_LAY])&jarg2; 
  {
    double (*inp)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg2);
    double (*dest)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg1->eq_ts);
    int ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SOI_LAY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double (*result)[MAX_SOI_LAY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double (*)[MAX_SOI_LAY])(double (*)[MAX_SOI_LAY]) ((arg1)->eq_ts);
  *(double (**)[MAX_SOI_LAY])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double (*arg2)[MAX_SOI_LAY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(double (**)[MAX_SOI_LAY])&jarg2; 
  {
    double (*inp)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg2);
    double (*dest)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg1->eq_liq);
    int ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SOI_LAY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double (*result)[MAX_SOI_LAY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double (*)[MAX_SOI_LAY])(double (*)[MAX_SOI_LAY]) ((arg1)->eq_liq);
  *(double (**)[MAX_SOI_LAY])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double (*arg2)[MAX_SOI_LAY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(double (**)[MAX_SOI_LAY])&jarg2; 
  {
    double (*inp)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg2);
    double (*dest)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg1->eq_ice);
    int ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SOI_LAY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double (*result)[MAX_SOI_LAY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double (*)[MAX_SOI_LAY])(double (*)[MAX_SOI_LAY]) ((arg1)->eq_ice);
  *(double (**)[MAX_SOI_LAY])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1vwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double (*arg2)[MAX_SOI_LAY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(double (**)[MAX_SOI_LAY])&jarg2; 
  {
    double (*inp)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg2);
    double (*dest)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg1->eq_vwc);
    int ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SOI_LAY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1vwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double (*result)[MAX_SOI_LAY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double (*)[MAX_SOI_LAY])(double (*)[MAX_SOI_LAY]) ((arg1)->eq_vwc);
  *(double (**)[MAX_SOI_LAY])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1sws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double (*arg2)[MAX_SOI_LAY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(double (**)[MAX_SOI_LAY])&jarg2; 
  {
    double (*inp)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg2);
    double (*dest)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg1->eq_sws);
    int ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SOI_LAY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1sws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double (*result)[MAX_SOI_LAY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double (*)[MAX_SOI_LAY])(double (*)[MAX_SOI_LAY]) ((arg1)->eq_sws);
  *(double (**)[MAX_SOI_LAY])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1aws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double (*arg2)[MAX_SOI_LAY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(double (**)[MAX_SOI_LAY])&jarg2; 
  {
    double (*inp)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg2);
    double (*dest)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg1->eq_aws);
    int ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SOI_LAY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1aws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double (*result)[MAX_SOI_LAY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double (*)[MAX_SOI_LAY])(double (*)[MAX_SOI_LAY]) ((arg1)->eq_aws);
  *(double (**)[MAX_SOI_LAY])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_ta;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_ta);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_co2;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_co2);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1eet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_eet;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1eet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_eet);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_pet;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_pet);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1par_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_par;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1par_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_par);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1grow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_grow;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1grow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_grow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1y_1eet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eq_y_eet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1y_1eet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->eq_y_eet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1y_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eq_y_pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1y_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->eq_y_pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1y_1co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eq_y_co2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1y_1co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->eq_y_co2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1prveetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eq_prveetmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1prveetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->eq_prveetmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1prvpetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eq_prvpetmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1prvpetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->eq_prvpetmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eetmxque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  deque< double > arg2 ;
  deque< double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  argp2 = *(deque< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null deque< double >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->eetmxque = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eetmxque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  deque< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result =  ((arg1)->eetmxque);
  *(deque< double > **)&jresult = new deque< double >((const deque< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1petmxque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  deque< double > arg2 ;
  deque< double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  argp2 = *(deque< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null deque< double >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->petmxque = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1petmxque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  deque< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result =  ((arg1)->petmxque);
  *(deque< double > **)&jresult = new deque< double >((const deque< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (GridData *) ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (CohortData *) ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ts1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12*MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_ts1d;
    for (ii = 0; ii < (size_t)12*MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ts1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_ts1d);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12*MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1liq1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12*MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_liq1d;
    for (ii = 0; ii < (size_t)12*MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1liq1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_liq1d);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12*MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1vwc1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12*MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_vwc1d;
    for (ii = 0; ii < (size_t)12*MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1vwc1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_vwc1d);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12*MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1sws1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12*MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_sws1d;
    for (ii = 0; ii < (size_t)12*MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1sws1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_sws1d);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12*MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ice1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12*MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eq_ice1d;
    for (ii = 0; ii < (size_t)12*MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_EnvData_1eq_1ice1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eq_ice1d);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12*MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d1tod2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->d1tod2();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d2tod1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->d2tod1();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1FirData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FirData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FirData *)new FirData();
  *(FirData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1FirData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FirData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  veg2atm_fir *arg2 = (veg2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(veg2atm_fir **)&jarg2; 
  if (arg1) (arg1)->y_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  veg2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (veg2atm_fir *)& ((arg1)->y_v2a);
  *(veg2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1v2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  veg2soi_fir *arg2 = (veg2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(veg2soi_fir **)&jarg2; 
  if (arg1) (arg1)->y_v2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1v2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  veg2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (veg2soi_fir *)& ((arg1)->y_v2soi);
  *(veg2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  soi2atm_fir *arg2 = (soi2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(soi2atm_fir **)&jarg2; 
  if (arg1) (arg1)->y_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  soi2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (soi2atm_fir *)& ((arg1)->y_soi2a);
  *(soi2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  soidiag_fir *arg2 = (soidiag_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(soidiag_fir **)&jarg2; 
  if (arg1) (arg1)->y_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  soidiag_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (soidiag_fir *)& ((arg1)->y_soid);
  *(soidiag_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1a2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  atm2soi_fir *arg2 = (atm2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(atm2soi_fir **)&jarg2; 
  if (arg1) (arg1)->y_a2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1y_1a2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  atm2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (atm2soi_fir *)& ((arg1)->y_a2soi);
  *(atm2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1useseverity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  FirData *arg1 = (FirData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useseverity = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_FirData_1useseverity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (bool) ((arg1)->useseverity);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1endOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->endOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1burn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->burn();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1ysf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FirData *arg1 = (FirData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ysf = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_FirData_1ysf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (int) ((arg1)->ysf);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (GridData *) ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (CohortData *) ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1GridData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GridData *)new GridData();
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1GridData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GridData *arg1 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GridData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1gid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1gid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->gid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1lat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lat = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_GridData_1lat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float) ((arg1)->lat);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1lon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lon = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_GridData_1lon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float) ((arg1)->lon);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1alldaylengths_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 365) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->alldaylengths;
    for (ii = 0; ii < (size_t)365; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1alldaylengths_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float *)(float *) ((arg1)->alldaylengths);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 365); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1fri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fri = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1fri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->fri);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1fireyear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_FSIZE_DRV_YR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->fireyear;
    for (ii = 0; ii < (size_t)MAX_FSIZE_DRV_YR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1fireyear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int *)(int *) ((arg1)->fireyear);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_FSIZE_DRV_YR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1firesize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_FSIZE_DRV_YR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->firesize;
    for (ii = 0; ii < (size_t)MAX_FSIZE_DRV_YR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1firesize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int *)(int *) ((arg1)->firesize);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_FSIZE_DRV_YR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1fireseason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_FSIZE_DRV_YR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->fireseason;
    for (ii = 0; ii < (size_t)MAX_FSIZE_DRV_YR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1fireseason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int *)(int *) ((arg1)->fireseason);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_FSIZE_DRV_YR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1topsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->topsoil = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1topsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->topsoil);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1botsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->botsoil = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1botsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->botsoil);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1act_1atm_1drv_1yr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_atm_drv_yr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1act_1atm_1drv_1yr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->act_atm_drv_yr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1ta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float (*arg2)[12] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = *(float (**)[12])&jarg2; 
  {
    float (*inp)[12] = (float (*)[12])(arg2);
    float (*dest)[12] = (float (*)[12])(arg1->ta);
    int ii = 0;
    for (; ii < MAX_ATM_DRV_YR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < 12; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_GridData_1ta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float (*result)[12] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float (*)[12])(float (*)[12]) ((arg1)->ta);
  *(float (**)[12])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1prec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float (*arg2)[12] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = *(float (**)[12])&jarg2; 
  {
    float (*inp)[12] = (float (*)[12])(arg2);
    float (*dest)[12] = (float (*)[12])(arg1->prec);
    int ii = 0;
    for (; ii < MAX_ATM_DRV_YR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < 12; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_GridData_1prec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float (*result)[12] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float (*)[12])(float (*)[12]) ((arg1)->prec);
  *(float (**)[12])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1nirr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float (*arg2)[12] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = *(float (**)[12])&jarg2; 
  {
    float (*inp)[12] = (float (*)[12])(arg2);
    float (*dest)[12] = (float (*)[12])(arg1->nirr);
    int ii = 0;
    for (; ii < MAX_ATM_DRV_YR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < 12; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_GridData_1nirr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float (*result)[12] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float (*)[12])(float (*)[12]) ((arg1)->nirr);
  *(float (**)[12])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float (*arg2)[12] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = *(float (**)[12])&jarg2; 
  {
    float (*inp)[12] = (float (*)[12])(arg2);
    float (*dest)[12] = (float (*)[12])(arg1->vap);
    int ii = 0;
    for (; ii < MAX_ATM_DRV_YR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < 12; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_GridData_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float (*result)[12] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float (*)[12])(float (*)[12]) ((arg1)->vap);
  *(float (**)[12])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1ta1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ta1d;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1ta1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ta1d);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1prec1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->prec1d;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1prec1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float *)(float *) ((arg1)->prec1d);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1nirr1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nirr1d;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1nirr1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nirr1d);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1vap1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vap1d;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1vap1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vap1d);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1d1tod2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GridData *arg1 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  (arg1)->d1tod2();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1RegionData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RegionData *)new RegionData();
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1RegionData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RegionData *arg1 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RegionData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegionData_1act_1co2_1drv_1yr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RegionData *arg1 = (RegionData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_co2_drv_yr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RegionData_1act_1co2_1drv_1yr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RegionData *arg1 = (RegionData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  result = (int) ((arg1)->act_co2_drv_yr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RegionData *arg1 = (RegionData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_CO2_DRV_YR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->co2year;
    for (ii = 0; ii < (size_t)MAX_CO2_DRV_YR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RegionData *arg1 = (RegionData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  result = (int *)(int *) ((arg1)->co2year);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_CO2_DRV_YR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegionData *arg1 = (RegionData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_CO2_DRV_YR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->co2;
    for (ii = 0; ii < (size_t)MAX_CO2_DRV_YR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegionData *arg1 = (RegionData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  result = (float *)(float *) ((arg1)->co2);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_CO2_DRV_YR); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1RestartData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RestartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RestartData *)new RestartData();
  *(RestartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1RestartData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RestartData *arg1 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RestartData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1reinitValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RestartData *arg1 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  (arg1)->reinitValue();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1chtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1chtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->chtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1perma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->perma = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1perma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->perma);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->TSsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->TSsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->DZsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->DZsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->LIQsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->LIQsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1RHOsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->RHOsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1RHOsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->RHOsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ICEsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->ICEsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1AGEsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->AGEsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1AGEsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->AGEsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->TSsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->TSsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->DZsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->DZsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->LIQsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->LIQsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ICEsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->ICEsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1FROZENsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->FROZENsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1FROZENsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->FROZENsoil);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TYPEsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->TYPEsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TYPEsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->TYPEsoil);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1NONCsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->NONCsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1NONCsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->NONCsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1REACsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->REACsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1REACsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->REACsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1toptA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->toptA;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1toptA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->toptA);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1eetmxA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eetmxA;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1eetmxA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eetmxA);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1petmxA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->petmxA;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1petmxA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->petmxA);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleafmxA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->unnormleafmxA;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleafmxA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->unnormleafmxA);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TYPEmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_MIN_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->TYPEmin;
    for (ii = 0; ii < (size_t)MAX_MIN_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TYPEmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->TYPEmin);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_MIN_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSrock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ROC_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->TSrock;
    for (ii = 0; ii < (size_t)MAX_ROC_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSrock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->TSrock);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_ROC_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZrock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ROC_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->DZrock;
    for (ii = 0; ii < (size_t)MAX_ROC_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZrock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->DZrock);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_ROC_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->frontZ;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->frontZ);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontFT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->frontFT;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontFT_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->frontFT);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1soln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->soln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1soln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->soln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->avln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->avln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1wdebris_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wdebris = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1wdebris_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->wdebris);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1strn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->strn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1strn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->strn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ston_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ston = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ston_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->ston);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vegc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->vegc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deadc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->deadc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deadn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->deadn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prveetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prveetmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prveetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->prveetmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvpetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prvpetmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvpetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->prvpetmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->unnormleaf = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->unnormleaf);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvunnormleafmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prvunnormleafmx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvunnormleafmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->prvunnormleafmx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvtopt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prvtopt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvtopt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->prvtopt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1c2n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->c2n = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1c2n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->c2n);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdfib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdfib = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdfib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->kdfib);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdhum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdhum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdhum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->kdhum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->kdmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdslow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdslow = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1kdslow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->kdslow);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1foliagemx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->foliagemx = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1foliagemx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->foliagemx);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ysf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ysf = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ysf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->ysf);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1burnedn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->burnedn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1burnedn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->burnedn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lai = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->lai);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1VEG_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_VEG_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1DRG_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_DRG_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1rhoa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhoa = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1rhoa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->rhoa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vpd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vpd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vpd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->vpd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1abshd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->abshd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1abshd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->abshd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1dersvp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dersvp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1dersvp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->dersvp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->vp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1svp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->svp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1svp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->svp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atmdiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atmdiag_env *)new atmdiag_env();
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atmdiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atmdiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1fir_1burnthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_fir *arg1 = (soidiag_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->burnthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1fir_1burnthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_fir *arg1 = (soidiag_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_fir **)&jarg1; 
  result = (double) ((arg1)->burnthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soidiag_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soidiag_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soidiag_fir *)new soidiag_fir();
  *(soidiag_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soidiag_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soidiag_fir *arg1 = (soidiag_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soidiag_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1envlai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->envlai = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1envlai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->envlai);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1btran_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->btran = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1btran_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->btran);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1ppfd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ppfd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1ppfd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->m_ppfd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1vpd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_vpd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1vpd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->m_vpd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->rc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1cc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1cc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->cc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rac = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->rac);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rinter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rinter = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rinter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->rinter);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1sinter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sinter = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1sinter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->sinter);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1parabsorb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->parabsorb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1parabsorb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->parabsorb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1ppfdabsorb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ppfdabsorb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1ppfdabsorb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->ppfdabsorb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1vegfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vegfrac = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1vegfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->vegfrac);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegdiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegdiag_env *)new vegdiag_env();
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegdiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegdiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1abvgndc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->abvgndc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1abvgndc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->abvgndc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lai = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->lai);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fpc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fpc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fpc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->fpc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1leaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->leaf = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1leaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->leaf);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1foliage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->foliage = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1foliage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->foliage);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1raq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->raq10 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1raq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->raq10);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1ftemp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ftemp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1ftemp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->ftemp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1gv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gv = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1gv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->gv);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1kr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1kr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->kr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fna_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fna = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fna_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->fna);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fca_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fca = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fca_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->fca);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegdiag_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegdiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegdiag_bgc *)new vegdiag_bgc();
  *(vegdiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegdiag_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1dense_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dense = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1dense_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  result = (double) ((arg1)->dense);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1melt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->melt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1melt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  result = (double) ((arg1)->melt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwdiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwdiag_env *)new snwdiag_env();
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwdiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwdiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1growpct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->growpct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1growpct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->growpct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1watertab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->watertab = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1watertab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->watertab);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1frasat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->frasat = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1frasat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->frasat);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1itnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->itnum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1itnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->itnum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1itnumliq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->itnumliq = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1itnumliq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->itnumliq);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1btran_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->btran = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1btran_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->btran);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1degday10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->degday10 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1degday10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->degday10);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1nfactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nfactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1nfactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->nfactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1permafrost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->permafrost = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1permafrost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->permafrost);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1growstart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->growstart = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1growstart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->growstart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1snowfree1st_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->snowfree1st = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1snowfree1st_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->snowfree1st);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1growend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->growend = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1growend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->growend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tmineral10cm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tmineral10cm = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tmineral10cm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tmineral10cm);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1trock34m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->trock34m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1trock34m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->trock34m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1unfrzcolumn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->unfrzcolumn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1unfrzcolumn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->unfrzcolumn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1allvwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->allvwc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1allvwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->allvwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1alliwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->alliwc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1alliwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->alliwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1alllwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->alllwc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1alllwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->alllwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1allsws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->allsws;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1allsws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->allsws);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1allaws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->allaws;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1allaws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->allaws);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hcond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->hcond;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hcond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->hcond);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1minliq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minliq;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1minliq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->minliq);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tem;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->tem);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcond;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcond);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1frzfnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->frzfnt;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1frzfnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->frzfnt);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1thwfnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->thwfnt;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1thwfnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->thwfnt);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1actual_1num_1soil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->actual_num_soil = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1actual_1num_1soil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->actual_num_soil);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1mossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mossthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1mossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->mossthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1shlwthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shlwthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1shlwthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->shlwthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1deepthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deepthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1deepthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->deepthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1minethick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minethick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1minethick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->minethick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1mossnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mossnum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1mossnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->mossnum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1shlwnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shlwnum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1shlwnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->shlwnum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1deepnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deepnum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1deepnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->deepnum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1maxrootratio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxrootratio = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1maxrootratio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->maxrootratio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1maxrootind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxrootind = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1maxrootind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->maxrootind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soidiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soidiag_env *)new soidiag_env();
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soidiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soidiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1ksoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ksoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1ksoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->ksoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhmoist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhmoist;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhmoist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhmoist);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhq10;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhq10);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1frprod_1frac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->frprod_frac;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1frprod_1frac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->frprod_frac);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1totc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->totc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1totc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->totc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1reacsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->reacsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1reacsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->reacsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1noncsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->noncsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1noncsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->noncsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rrhsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rrhsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rrhsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->rrhsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1nrhsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nrhsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1nrhsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->nrhsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1shlwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shlwc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1shlwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->shlwc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1deepc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deepc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1deepc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->deepc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1minec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1minec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->minec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1kdl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kdl;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1kdl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kdl);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1kdr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kdr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1kdr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kdr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1kdn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kdn;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1kdn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kdn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soidiag_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soidiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soidiag_bgc *)new soidiag_bgc();
  *(soidiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soidiag_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soidiag_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1VAR_1NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_VAR_NULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1TEM_1TSTEP_1SMALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_TEM_TSTEP_SMALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1WAT_1TSTEP_1SMALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_WAT_TSTEP_SMALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1TOO_1MANY_1FRZ_1FRONTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_TOO_MANY_FRZ_FRONTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1NIMMOB_1RANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_NIMMOB_RANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1BURN_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_BURN_ZERO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1LAYER_1FIRST_1DEEP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_LAYER_FIRST_DEEP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1NCFILE_1NOT_1EXIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_NCFILE_NOT_EXIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1eet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1eet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  result = (double) ((arg1)->eet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  result = (double) ((arg1)->pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1ineet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ineet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1ineet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  result = (double) ((arg1)->ineet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1lnd2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lnd2atm_env *)new lnd2atm_env();
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1lnd2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lnd2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1bgc_1nep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2atm_bgc *arg1 = (lnd2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nep = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1bgc_1nep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2atm_bgc *arg1 = (lnd2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->nep);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1lnd2atm_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lnd2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lnd2atm_bgc *)new lnd2atm_bgc();
  *(lnd2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1lnd2atm_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lnd2atm_bgc *arg1 = (lnd2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lnd2atm_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1prec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1prec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->prec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1snfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1snfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->snfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1rnfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rnfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1rnfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->rnfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1girr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->girr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1girr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->girr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1nirr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nirr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1nirr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->nirr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1par_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->par = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1par_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->par);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2lnd_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2lnd_env *)new atm2lnd_env();
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2lnd_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2lnd_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1rnfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rnfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1rnfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->rnfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1snfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1snfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->snfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2veg_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2veg_env *)new atm2veg_env();
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2veg_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2veg_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1ingpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ingpp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1ingpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->ingpp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1gpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gpp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1gpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->gpp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1innpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->innpp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1innpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->innpp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1npp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->npp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1npp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->npp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2veg_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2veg_bgc *)new atm2veg_bgc();
  *(atm2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2veg_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1trans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->trans = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1trans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->trans);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evapo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evapo = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evapo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->evapo);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1trans_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->trans_pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1trans_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->trans_pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evapo_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evapo_pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evapo_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->evapo_pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1sublim_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sublim = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1sublim_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->sublim);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1solrad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->solrad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1solrad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->solrad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2atm_env *)new veg2atm_env();
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rm = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rm);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rg = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rg);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2atm_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2atm_bgc *)new veg2atm_bgc();
  *(veg2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2atm_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rthfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->rthfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sthfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->sthfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rdrip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rdrip = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rdrip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->rdrip);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sdrip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sdrip = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sdrip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->sdrip);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->sw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2gnd_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2gnd_env *)new veg2gnd_env();
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2gnd_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2gnd_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ltrfalc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->ltrfalc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfaln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ltrfaln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfaln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->ltrfaln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2soi_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2soi_bgc *)new veg2soi_bgc();
  *(veg2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2soi_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1innuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->innuptake = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1innuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->innuptake);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1nuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nuptake = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1nuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->nuptake);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1suptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->suptake = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1suptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->suptake);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1luptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->luptake = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1luptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->luptake);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2veg_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2veg_bgc *)new soi2veg_bgc();
  *(soi2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2veg_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nmobil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nmobil = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nmobil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->nmobil);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nresorb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nresorb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nresorb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->nresorb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2veg_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2veg_bgc *)new veg2veg_bgc();
  *(veg2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2veg_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2soi_1env_1rperc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2soi_env *arg1 = (lnd2soi_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2soi_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rperc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2soi_1env_1rperc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2soi_env *arg1 = (lnd2soi_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2soi_env **)&jarg1; 
  result = (double) ((arg1)->rperc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2soi_1env_1sperc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2soi_env *arg1 = (lnd2soi_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2soi_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sperc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2soi_1env_1sperc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2soi_env *arg1 = (lnd2soi_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2soi_env **)&jarg1; 
  result = (double) ((arg1)->sperc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2soi_1env_1perc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2soi_env *arg1 = (lnd2soi_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2soi_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->perc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2soi_1env_1perc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2soi_env *arg1 = (lnd2soi_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2soi_env **)&jarg1; 
  result = (double) ((arg1)->perc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1lnd2soi_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lnd2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lnd2soi_env *)new lnd2soi_env();
  *(lnd2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1lnd2soi_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lnd2soi_env *arg1 = (lnd2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lnd2soi_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qover_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->qover = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qover_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  result = (double) ((arg1)->qover);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qdrain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->qdrain = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qdrain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  result = (double) ((arg1)->qdrain);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2lnd_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2lnd_env *)new soi2lnd_env();
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2lnd_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2lnd_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1nlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nlost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1nlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  result = (double) ((arg1)->nlost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2lnd_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2lnd_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2lnd_bgc *)new soi2lnd_bgc();
  *(soi2lnd_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2lnd_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1evap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evap = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1evap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  result = (double) ((arg1)->evap);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1trans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->trans = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1trans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  result = (double) ((arg1)->trans);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1solrad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->solrad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1solrad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  result = (double) ((arg1)->solrad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2atm_env *)new soi2atm_env();
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rrh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rrh;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rrh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rrh);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1nrh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nrh;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1nrh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->nrh);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1wdrh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wdrh = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1wdrh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->wdrh);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2atm_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2atm_bgc *)new soi2atm_bgc();
  *(soi2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2atm_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1sublim_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sublim = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1sublim_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  result = (double) ((arg1)->sublim);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1solrad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->solrad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1solrad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  result = (double) ((arg1)->solrad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snw2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snw2atm_env *)new snw2atm_env();
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snw2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snw2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snw2soi_1env_1infl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snw2soi_env *arg1 = (snw2soi_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2soi_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->infl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snw2soi_1env_1infl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snw2soi_env *arg1 = (snw2soi_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2soi_env **)&jarg1; 
  result = (double) ((arg1)->infl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snw2soi_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snw2soi_env *)new snw2soi_env();
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snw2soi_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snw2soi_env *arg1 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snw2soi_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1ninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ninput = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1ninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->ninput);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2soi_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2soi_bgc *)new atm2soi_bgc();
  *(atm2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2soi_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1netnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->netnmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1netnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->netnmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1nimmob_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nimmob = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1nimmob_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->nimmob);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2soi_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2soi_bgc *)new soi2soi_bgc();
  *(soi2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2soi_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1fir_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2soi_fir *arg1 = (atm2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1fir_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2soi_fir *arg1 = (atm2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_fir **)&jarg1; 
  result = (double) ((arg1)->orgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2soi_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2soi_fir *)new atm2soi_fir();
  *(atm2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2soi_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2soi_fir *arg1 = (atm2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2soi_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2atm_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2atm_fir *)new soi2atm_fir();
  *(soi2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2atm_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2atm_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2atm_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2atm_fir *)new veg2atm_fir();
  *(veg2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2atm_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2atm_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->abvc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->abvc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->abvn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->abvn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blwc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->blwc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blwn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->blwn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2soi_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2soi_fir *)new veg2soi_fir();
  *(veg2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2soi_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2soi_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SNW_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SNW_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ROC_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ROC_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1MOS_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_MOS_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SLW_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SLW_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1DEP_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_DEP_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1MIN_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_MIN_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_MINETHICK_1get(JNIEnv *jenv, jclass jcls) {
  jfloatArray jresult = 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (float *)(float *)MINETHICK;
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_MIN_LAY); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SOI_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SOI_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1DYN_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_DYN_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1GRN_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_GRN_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1NUM_1FNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_NUM_FNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1OUT_1SOI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_OUT_SOI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1OUT_1SNW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_OUT_SNW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1bl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->gl_bl = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1bl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->gl_bl);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1glmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->glmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1glmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->glmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->gl_c = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->gl_c);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1albvisnir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->albvisnir = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1albvisnir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->albvisnir);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1er_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->er = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1er_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->er);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ircoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ircoef = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ircoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->ircoef);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1iscoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->iscoef = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1iscoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->iscoef);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1open_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vpd_open = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1open_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->vpd_open);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1close_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vpd_close = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1close_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->vpd_close);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1all2prj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->all2prj = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1all2prj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->all2prj);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ppfd50_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ppfd50 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ppfd50_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->ppfd50);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1matureage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->matureage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1matureage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (float) ((arg1)->matureage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegpar_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegpar_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegpar_env *)new vegpar_env();
  *(vegpar_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegpar_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegpar_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1kra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kra = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1kra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (float) ((arg1)->kra);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1krb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->krb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1krb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (float) ((arg1)->krb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (float) ((arg1)->cmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->nmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (float) ((arg1)->nmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cfall = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (float) ((arg1)->cfall);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->nfall = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (float) ((arg1)->nfall);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegpar_1cal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegpar_cal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegpar_cal *)new vegpar_cal();
  *(vegpar_cal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegpar_1cal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegpar_cal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_fire_1par_1burnthick_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  fire_par *arg1 = (fire_par *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(fire_par **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->burnthick_max = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_fire_1par_1burnthick_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  fire_par *arg1 = (fire_par *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(fire_par **)&jarg1; 
  result = (float) ((arg1)->burnthick_max);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_fire_1par_1vegcombust_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  fire_par *arg1 = (fire_par *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(fire_par **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vegcombust = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_fire_1par_1vegcombust_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  fire_par *arg1 = (fire_par *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(fire_par **)&jarg1; 
  result = (float) ((arg1)->vegcombust);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_fire_1par_1vegslash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  fire_par *arg1 = (fire_par *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(fire_par **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vegslash = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_fire_1par_1vegslash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  fire_par *arg1 = (fire_par *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(fire_par **)&jarg1; 
  result = (float) ((arg1)->vegslash);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1fire_1par(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  fire_par *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (fire_par *)new fire_par();
  *(fire_par **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1fire_1par(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  fire_par *arg1 = (fire_par *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(fire_par **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->raq10a0 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->raq10a0);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->raq10a1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->raq10a1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->raq10a2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->raq10a2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->raq10a3 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->raq10a3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1maturefoliagemin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maturefoliagemin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1maturefoliagemin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->maturefoliagemin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2na_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c2na = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2na_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->c2na);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c2nb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->c2nb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c2nmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->c2nmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cnmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->cnmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1initcneven_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initcneven = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1initcneven_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->initcneven);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1initleafmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initleafmx = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1initleafmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->initleafmx);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1aleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aleaf = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1aleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->aleaf);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1bleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bleaf = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1bleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->bleaf);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cleaf = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->cleaf);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1minleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minleaf = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1minleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->minleaf);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1sla_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sla = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1sla_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->sla);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1leafmxc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->leafmxc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1leafmxc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->leafmxc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kleafc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kleafc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kleafc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->kleafc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cov = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->cov);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->m1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->m2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m3 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->m3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m4 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1m4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->m4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kn1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kn1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kn1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->kn1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->tmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->tmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->toptmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->toptmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->toptmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->toptmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->kc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1ki_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ki = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1ki_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->ki);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1labncon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->labncon = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1labncon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->labncon);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1abv2totmass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->abv2totmass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1abv2totmass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (float) ((arg1)->abv2totmass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegpar_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegpar_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegpar_bgc *)new vegpar_bgc();
  *(vegpar_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegpar_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegpar_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1psimax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->psimax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1psimax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->psimax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootmass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rootmass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootmass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->rootmass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootbeta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rootbeta = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootbeta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->rootbeta);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootdp4infil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rootdp4infil = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootdp4infil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->rootdp4infil);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1richardl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->richardl = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1richardl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->richardl);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootdp4gpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rootdp4gpp = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rootdp4gpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->rootdp4gpp);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1frprod_1frac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->frprod_frac;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1frprod_1frac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float *)(float *) ((arg1)->frprod_frac);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1Ds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Ds = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1Ds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->Ds);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1Ws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Ws = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1Ws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->Ws);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1Dsmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Dsmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1Dsmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->Dsmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1b_1infilt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b_infilt = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1b_1infilt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->b_infilt);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1drainmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->drainmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1drainmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->drainmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1wfact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wfact = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1wfact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->wfact);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1evapmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->evapmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1evapmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (float) ((arg1)->evapmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soipar_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soipar_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soipar_env *)new soipar_env();
  *(soipar_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soipar_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soipar_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kn2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kn2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kn2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->kn2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->moistmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->moistmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->moistmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->moistmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistopt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->moistopt = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistopt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->moistopt);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rhq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rhq10 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rhq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->rhq10);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rootza_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rootza = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rootza_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->rootza);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rootzb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rootzb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rootzb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->rootzb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rootzc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rootzc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rootzc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->rootzc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1minrootz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minrootz = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1minrootz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->minrootz);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1propftos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->propftos = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1propftos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->propftos);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1lcclnc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lcclnc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1lcclnc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->lcclnc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1nloss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->nloss = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1nloss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->nloss);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1cnsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cnsoil = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1cnsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->cnsoil);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1abvltrr2t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->abvltrr2t = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1abvltrr2t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->abvltrr2t);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1blwltrr2t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->blwltrr2t = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1blwltrr2t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->blwltrr2t);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1shlwa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shlwa = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1shlwa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->shlwa);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1shlwb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shlwb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1shlwb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->shlwb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1deepa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->deepa = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1deepa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->deepa);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1deepb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->deepb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1deepb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->deepb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1minea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minea = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1minea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->minea);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1mineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mineb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1mineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->mineb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1maxmossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxmossthick = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1maxmossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->maxmossthick);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fsoma = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->fsoma);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fsompr = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->fsompr);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fsomcr = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->fsomcr);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1som2co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->som2co2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1som2co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (float) ((arg1)->som2co2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soipar_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soipar_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soipar_bgc *)new soipar_bgc();
  *(soipar_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soipar_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soipar_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1nup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->nup = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1nup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (float) ((arg1)->nup);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcfib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kdcfib = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcfib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (float) ((arg1)->kdcfib);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdchum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kdchum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdchum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (float) ((arg1)->kdchum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kdcmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (float) ((arg1)->kdcmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcslow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->kdcslow = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcslow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (float) ((arg1)->kdcslow);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soipar_1cal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soipar_cal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soipar_cal *)new soipar_cal();
  *(soipar_cal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soipar_1cal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soipar_cal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1denmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->denmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1denmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  result = (float) ((arg1)->denmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->albmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  result = (float) ((arg1)->albmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->albmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  result = (float) ((arg1)->albmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1newden_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->newden = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1newden_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  result = (float) ((arg1)->newden);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwpar_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwpar_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwpar_env *)new snwpar_env();
  *(snwpar_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwpar_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwpar_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_DENLIQ_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)DENLIQ;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_DENICE_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)DENICE;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_TCLIQ_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)TCLIQ;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_TCICE_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)TCICE;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_TCAIR_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)TCAIR;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SHCLIQ_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)SHCLIQ;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SHCICE_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)SHCICE;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SHCAIR_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)SHCAIR;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_LHFUS_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)LHFUS;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_LHVAP_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)LHVAP;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_LHSUB_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)LHSUB;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_G_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)G;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_PI_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)PI;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_Pstd_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)Pstd;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_STFBOLTZ_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)STFBOLTZ;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_BOLTZ_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)BOLTZ;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_NA_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)NA;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_KPA_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)KPA;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1ta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1ta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  result = (double) ((arg1)->ta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1clds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->clds = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1clds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  result = (double) ((arg1)->clds);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->co2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  result = (double) ((arg1)->co2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1dsr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dsr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1dsr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  result = (int) ((arg1)->dsr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atmstate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atmstate_env *)new atmstate_env();
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atmstate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atmstate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1snow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snow = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1snow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  result = (double) ((arg1)->snow);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1rain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rain = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1rain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  result = (double) ((arg1)->rain);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegstate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegstate_env *)new vegstate_env();
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegstate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegstate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->c);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deadc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->deadc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deadn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->deadn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1ston_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ston = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1ston_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->ston);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1strn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->strn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1strn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->strn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1unnormleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->unnormleaf = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1unnormleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->unnormleaf);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegstate_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegstate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegstate_bgc *)new vegstate_bgc();
  *(vegstate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegstate_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegstate_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1thick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->thick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1thick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double) ((arg1)->thick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1swe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swe = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1swe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double) ((arg1)->swe);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwstate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwstate_env *)new snwstate_env();
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwstate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwstate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1numsl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numsl = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1numsl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (int) ((arg1)->numsl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1numal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numal = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1numal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (int) ((arg1)->numal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1tsave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tsave = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1tsave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double) ((arg1)->tsave);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ts;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->ts);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->liq;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->liq);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ice;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->ice);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1liqsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->liqsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1liqsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double) ((arg1)->liqsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1icesum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->icesum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1icesum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double) ((arg1)->icesum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1rootfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rootfrac;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1rootfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->rootfrac);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1dz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->dz;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1dz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->dz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->z;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->z);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1por_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->por;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1por_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->por);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->type;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->type);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soistate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soistate_env *)new soistate_env();
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soistate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soistate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1reac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->reac;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1reac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->reac);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1nonc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nonc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1nonc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->nonc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1wdebris_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wdebris = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1wdebris_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double) ((arg1)->wdebris);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double) ((arg1)->orgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->avln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double) ((arg1)->avln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soistate_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soistate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soistate_bgc *)new soistate_bgc();
  *(soistate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soistate_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soistate_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1NL_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_NL_STATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1NL_1FLXDIAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_NL_FLXDIAG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1L_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_L_STATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1L_1FLXDIAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_L_FLXDIAG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUMEQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUMEQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAXSTATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAXSTATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_DYINY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DYINY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MINY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MINY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1CO2_1DRV_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_CO2_DRV_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ATM_1DRV_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ATM_DRV_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ATM_1NOM_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ATM_NOM_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1FSIZE_1DRV_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_FSIZE_DRV_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1EQ_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_EQ_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SP_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SP_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BEG_1TR_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BEG_TR_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_END_1TR_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)END_TR_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BEG_1SC_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BEG_SC_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_END_1SC_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)END_SC_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_END_1SP_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)END_SP_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BEG_1SP_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BEG_SP_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1TR_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_TR_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SC_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SC_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1TR_1FIR_1OCR_1NUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_TR_FIR_OCR_NUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SP_1FIR_1OCR_1NUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SP_FIR_OCR_NUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1FIR_1OCR_1NUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_FIR_OCR_NUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SOC_1DEP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SOC_DEP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1FR_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_FR_INT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1CohortLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CohortLookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CohortLookup *)new CohortLookup();
  *(CohortLookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1CohortLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CohortLookup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->kc;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->kc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ki_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ki;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ki_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->ki);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gva_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->gva;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gva_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->gva);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tmin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->toptmin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->toptmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->toptmax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->toptmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tmax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->raq10a0;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->raq10a0);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->raq10a1;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->raq10a1);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->raq10a2;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->raq10a2);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->raq10a3;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->raq10a3);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kn1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->kn1;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kn1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->kn1);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1labncon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->labncon;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1labncon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->labncon);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1leafmxc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->leafmxc;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1leafmxc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->leafmxc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kleafc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->kleafc;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kleafc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->kleafc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1sla_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sla;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1sla_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->sla);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->cov;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->cov);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fpcmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->fpcmax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fpcmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->fpcmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1abv2totmass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->abv2totmass;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1abv2totmass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->abv2totmass);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1maturefoliagemin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->maturefoliagemin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1maturefoliagemin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->maturefoliagemin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initleafmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->initleafmx;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initleafmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->initleafmx);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->c2nmin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->c2nmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->cnmin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->cnmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2na_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->c2na;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2na_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->c2na);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->c2nb;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->c2nb);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initcneven_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->initcneven;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initcneven_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->initcneven);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->minleaf;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->minleaf);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1aleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->aleaf;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1aleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->aleaf);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1bleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->bleaf;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1bleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->bleaf);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->cleaf;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->cleaf);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->m1;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->m1);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->m2;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->m2);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->m3;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->m3);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->m4;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->m4);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1albvisnir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albvisnir;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1albvisnir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albvisnir);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1bl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->gl_bl;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1bl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->gl_bl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->gl_c;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->gl_c);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1glmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->glmax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1glmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->glmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1er_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->er;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1er_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->er);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ircoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ircoef;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ircoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->ircoef);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1iscoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->iscoef;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1iscoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->iscoef);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1open_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vpd_open;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1open_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->vpd_open);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1close_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vpd_close;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1close_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->vpd_close);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lwp_1open_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->lwp_open;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lwp_1open_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->lwp_open);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lwp_1close_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->lwp_close;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lwp_1close_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->lwp_close);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1all2prj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->all2prj;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1all2prj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->all2prj);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ppfd50_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ppfd50;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ppfd50_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->ppfd50);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rhq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rhq10;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rhq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rhq10);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kn2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->kn2;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kn2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->kn2);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->moistmin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->moistmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistopt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->moistopt;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistopt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->moistopt);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->moistmax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->moistmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1propftos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->propftos;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1propftos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->propftos);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nloss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nloss;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nloss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->nloss);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lcclnc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->lcclnc;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lcclnc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->lcclnc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cnsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->cnsoil;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cnsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->cnsoil);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcfib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->kdcfib);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcfib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->kdcfib);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdchum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->kdchum);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdchum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->kdchum);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->kdcmin);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->kdcmin);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcslow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->kdcslow);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcslow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->kdcslow);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->nup);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->nup);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->cmax);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->cmax);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->nmax);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->nmax);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->cfall);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->cfall);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->nfall);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->nfall);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->kra);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->kra);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1krb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->krb);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1krb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->krb);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->initvegc);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->initvegc);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initstrn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->initstrn);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initstrn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->initstrn);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initston_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->initston);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initston_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->initston);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsolc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->initsolc);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsolc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->initsolc);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsoln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->initsoln);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsoln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->initsoln);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initavln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->initavln);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initavln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->initavln);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1frprod_1frac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_FR_INT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_FR_INT])&jarg2; 
  {
    float (*inp)[MAX_FR_INT] = (float (*)[MAX_FR_INT])(arg2);
    float (*dest)[MAX_FR_INT] = (float (*)[MAX_FR_INT])(arg1->frprod_frac);
    int ii = 0;
    for (; ii < MAX_VEG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_FR_INT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1frprod_1frac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_FR_INT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_FR_INT])(float (*)[MAX_FR_INT]) ((arg1)->frprod_frac);
  *(float (**)[MAX_FR_INT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootza_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rootza;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootza_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rootza);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootzb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rootzb;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootzb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rootzb);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootzc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rootzc;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootzc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rootzc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minrootz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->minrootz;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minrootz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->minrootz);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootmass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rootmass;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootmass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rootmass);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootbeta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rootbeta;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootbeta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rootbeta);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootdp4infil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rootdp4infil;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootdp4infil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rootdp4infil);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1richardl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->richardl;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1richardl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->richardl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootdp4gpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rootdp4gpp;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rootdp4gpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->rootdp4gpp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1maxmossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->maxmossthick;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1maxmossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->maxmossthick);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1abvltrr2t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->abvltrr2t;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1abvltrr2t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->abvltrr2t);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1blwltrr2t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->blwltrr2t;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1blwltrr2t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->blwltrr2t);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1envlai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MINY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MINY])&jarg2; 
  {
    float (*inp)[MINY] = (float (*)[MINY])(arg2);
    float (*dest)[MINY] = (float (*)[MINY])(arg1->envlai);
    int ii = 0;
    for (; ii < MAX_VEG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MINY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1envlai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MINY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MINY])(float (*)[MINY]) ((arg1)->envlai);
  *(float (**)[MINY])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1mossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->mossthick);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1mossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->mossthick);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fibthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->fibthick);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fibthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->fibthick);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1humthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->humthick);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1humthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->humthick);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->coefshlwa);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->coefshlwa);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->coefshlwb);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->coefshlwb);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->coefdeepa);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->coefdeepa);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->coefdeepb);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->coefdeepb);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->coefminea);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->coefminea);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->coefmineb);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->coefmineb);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ltrfalratiom2f_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->ltrfalratiom2f);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ltrfalratiom2f_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->ltrfalratiom2f);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ltrfalratioh2f_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->ltrfalratioh2f);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ltrfalratioh2f_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->ltrfalratioh2f);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->fsoma);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->fsoma);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->fsompr);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->fsompr);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->fsomcr);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->fsomcr);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1som2co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*arg2)[MAX_VEG_TYPE] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_VEG_TYPE])&jarg2; 
  {
    float (*inp)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg2);
    float (*dest)[MAX_VEG_TYPE] = (float (*)[MAX_VEG_TYPE])(arg1->som2co2);
    int ii = 0;
    for (; ii < MAX_DRG_TYPE; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_VEG_TYPE; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1som2co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float (*result)[MAX_VEG_TYPE] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float (*)[MAX_VEG_TYPE])(float (*)[MAX_VEG_TYPE]) ((arg1)->som2co2);
  *(float (**)[MAX_VEG_TYPE])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_MIN_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->minthick;
    for (ii = 0; ii < (size_t)MAX_MIN_LAY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->minthick);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_MIN_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1mintype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_MIN_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->mintype;
    for (ii = 0; ii < (size_t)MAX_MIN_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1mintype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->mintype);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_MIN_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1psimax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->psimax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1psimax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->psimax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1evapmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->evapmin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1evapmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->evapmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1Ds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_DRG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Ds;
    for (ii = 0; ii < (size_t)MAX_DRG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1Ds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Ds);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_DRG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1Ws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_DRG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Ws;
    for (ii = 0; ii < (size_t)MAX_DRG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1Ws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Ws);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_DRG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1Dsmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_DRG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Dsmax;
    for (ii = 0; ii < (size_t)MAX_DRG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1Dsmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Dsmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_DRG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1b_1infilt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_DRG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->b_infilt;
    for (ii = 0; ii < (size_t)MAX_DRG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1b_1infilt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->b_infilt);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_DRG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1drainmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_DRG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->drainmax;
    for (ii = 0; ii < (size_t)MAX_DRG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1drainmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->drainmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_DRG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1wfact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_DRG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->wfact;
    for (ii = 0; ii < (size_t)MAX_DRG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1wfact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->wfact);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_DRG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdenmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snwdenmax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdenmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->snwdenmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snwalbmax;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->snwalbmax);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snwalbmin;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->snwalbmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdennew_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snwdennew;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdennew_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->snwdennew);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1burnthick_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->burnthick_max;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1burnthick_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->burnthick_max);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vegcombust_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vegcombust;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vegcombust_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->vegcombust);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vegslash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vegslash;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vegslash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->vegslash);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1matureage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_TYPE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->matureage;
    for (ii = 0; ii < (size_t)MAX_VEG_TYPE; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1matureage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->matureage);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_VEG_TYPE); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SOIL_1TXTR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SOIL_TXTR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ST1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ST1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ST2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ST2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1SoilLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SoilLookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SoilLookup *)new SoilLookup();
  *(SoilLookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1SoilLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SoilLookup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1sand_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->sand;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1sand_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->sand);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1silt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->silt;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1silt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->silt);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1clay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->clay;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1clay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->clay);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksolids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Ksolids;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksolids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Ksolids);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Csolids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Csolids;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Csolids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Csolids);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Ksat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Ksat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Psisat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Psisat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Psisat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Psisat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1poro_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->poro;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1poro_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->poro);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->b;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->b);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->color;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->color);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1bulkden_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->bulkden;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1bulkden_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->bulkden);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1wiltp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->wiltp;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1wiltp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->wiltp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1fieldcap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->fieldcap;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1fieldcap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->fieldcap);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcunfsat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcunfsat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcunfsat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcunfsat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcfrzsat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcfrzsat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcfrzsat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcfrzsat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcdry_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcdry;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcdry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcdry);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatvis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albsatvis;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatvis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albsatvis);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatnir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albsatnir;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatnir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albsatnir);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdryvis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albdryvis;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdryvis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albdryvis);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdrynir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albdrynir;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdrynir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albdrynir);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1hk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*arg2)[MAX_SM] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_SM])&jarg2; 
  {
    float (*inp)[MAX_SM] = (float (*)[MAX_SM])(arg2);
    float (*dest)[MAX_SM] = (float (*)[MAX_SM])(arg1->hk);
    int ii = 0;
    for (; ii < MAX_SOIL_TXTR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SM; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1hk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*result)[MAX_SM] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float (*)[MAX_SM])(float (*)[MAX_SM]) ((arg1)->hk);
  *(float (**)[MAX_SM])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1psi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*arg2)[MAX_SM] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_SM])&jarg2; 
  {
    float (*inp)[MAX_SM] = (float (*)[MAX_SM])(arg2);
    float (*dest)[MAX_SM] = (float (*)[MAX_SM])(arg1->psi);
    int ii = 0;
    for (; ii < MAX_SOIL_TXTR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_SM; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1psi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*result)[MAX_SM] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float (*)[MAX_SM])(float (*)[MAX_SM]) ((arg1)->psi);
  *(float (**)[MAX_SM])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1AtmOutData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AtmOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AtmOutData *)new AtmOutData();
  *(AtmOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1AtmOutData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AtmOutData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1tdrvd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tdrvd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1tdrvd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tdrvd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1raind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->raind;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1raind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->raind);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1snowd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snowd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1snowd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->snowd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1svpd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->svpd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1svpd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->svpd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1dersvpd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->dersvpd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1dersvpd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->dersvpd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1rhoad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rhoad;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1rhoad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rhoad);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1abshdd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->abshdd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1abshdd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->abshdd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1dsrd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->dsrd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1dsrd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->dsrd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1ta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ta;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1ta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ta);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1clds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->clds;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1clds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->clds);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->co2;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->co2);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1eet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->eet;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1eet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->eet);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->pet;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->pet);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1rnfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rnfl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1rnfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rnfl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1snfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snfl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1snfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->snfl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1girr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->girr;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1girr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->girr);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1nirr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nirr;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1nirr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nirr);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1par_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->par;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1par_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->par);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1yrrnfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrrnfl = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1yrrnfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float) ((arg1)->yrrnfl);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1yrsnfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrsnfl = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1yrsnfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float) ((arg1)->yrsnfl);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1yrta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrta = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_AtmOutData_1yrta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AtmOutData *arg1 = (AtmOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtmOutData **)&jarg1; 
  result = (float) ((arg1)->yrta);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Cohort(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Cohort *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Cohort *)new Cohort();
  *(Cohort **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Cohort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Cohort **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1equiled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->equiled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1equiled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->equiled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1spined_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spined = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1spined_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->spined);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1transed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->transed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1transed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->transed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1watbaled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->watbaled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1watbaled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->watbaled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1failed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->failed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1failed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->failed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1errorid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->errorid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Cohort_1errorid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (int) ((arg1)->errorid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outputSpinup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outputSpinup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outputSpinup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->outputSpinup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1friderived_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->friderived = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1friderived_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->friderived);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1firstfireyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->firstfireyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Cohort_1firstfireyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (int) ((arg1)->firstfireyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1envmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->envmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1envmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->envmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ecomodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ecomodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ecomodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->ecomodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1dsbmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dsbmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1dsbmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->dsbmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1dslmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dslmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1dslmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->dslmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outRegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outRegn = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outRegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->outRegn);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSiteDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSiteDay = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSiteDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->outSiteDay);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSiteMonth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSiteMonth = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSiteMonth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->outSiteMonth);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSiteYear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSiteYear = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSiteYear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->outSiteYear);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSoilClm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSoilClm = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outSoilClm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->outSoilClm);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1chtlu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  CohortLookup *arg2 = (CohortLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(CohortLookup **)&jarg2; 
  if (arg1) (arg1)->chtlu = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1chtlu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  CohortLookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (CohortLookup *)& ((arg1)->chtlu);
  *(CohortLookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ground_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Ground arg2 ;
  Ground *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Ground **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ground");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ground = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ground_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Ground result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->ground);
  *(Ground **)&jresult = new Ground((const Ground &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Env arg2 ;
  Vegetation_Env *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Vegetation_Env **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Vegetation_Env");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ve = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Env result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->ve);
  *(Vegetation_Env **)&jresult = new Vegetation_Env((const Vegetation_Env &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Bgc arg2 ;
  Vegetation_Bgc *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Vegetation_Bgc **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Vegetation_Bgc");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vb = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Bgc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->vb);
  *(Vegetation_Bgc **)&jresult = new Vegetation_Bgc((const Vegetation_Bgc &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Soil_Bgc arg2 ;
  Soil_Bgc *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Soil_Bgc **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Soil_Bgc");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->sb = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Soil_Bgc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->sb);
  *(Soil_Bgc **)&jresult = new Soil_Bgc((const Soil_Bgc &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1integrator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Integrator arg2 ;
  Integrator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Integrator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Integrator");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->integrator = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1integrator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Integrator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->integrator);
  *(Integrator **)&jresult = new Integrator((const Integrator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fire_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  WildFire arg2 ;
  WildFire *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(WildFire **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null WildFire");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->fire = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fire_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  WildFire result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->fire);
  *(WildFire **)&jresult = new WildFire((const WildFire &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1timer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Timer **)&jarg2; 
  if (arg1) (arg1)->timer = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1timer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Timer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (Timer *) ((arg1)->timer);
  *(Timer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1atm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Atmosphere *arg2 = (Atmosphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Atmosphere **)&jarg2; 
  if (arg1) (arg1)->atm = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1atm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Atmosphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (Atmosphere *) ((arg1)->atm);
  *(Atmosphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Timer **)&jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setModelData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  (arg1)->setModelData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setInputData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  GridData *arg3 = (GridData *) 0 ;
  CohortData *arg4 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  arg3 = *(GridData **)&jarg3; 
  arg4 = *(CohortData **)&jarg4; 
  (arg1)->setInputData(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setProcessData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  BgcData *arg3 = (BgcData *) 0 ;
  FirData *arg4 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  arg3 = *(BgcData **)&jarg3; 
  arg4 = *(FirData **)&jarg4; 
  (arg1)->setProcessData(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setAtmData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  Grid *arg2 = (Grid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Grid **)&jarg2; 
  (arg1)->setAtmData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setSiteOutData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Cohort *arg1 = (Cohort *) 0 ;
  AtmOutData *arg2 = (AtmOutData *) 0 ;
  VegOutData *arg3 = (VegOutData *) 0 ;
  SnowSoilOutData *arg4 = (SnowSoilOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(AtmOutData **)&jarg2; 
  arg3 = *(VegOutData **)&jarg3; 
  arg4 = *(SnowSoilOutData **)&jarg4; 
  (arg1)->setSiteOutData(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setRegnOutData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RegnOutData *arg2 = (RegnOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RegnOutData **)&jarg2; 
  (arg1)->setRegnOutData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setRestartOutData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RestartData *arg2 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RestartData **)&jarg2; 
  (arg1)->setRestartOutData(arg2);
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1testEquilibrium(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool)(arg1)->testEquilibrium();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fireDrivingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->fireDrivingData(arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Cohort_1timerOutputYearIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->timerOutputYearIndex(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateMonthly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6, jboolean jarg7) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  bool temp6 ;
  bool temp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  (arg1)->updateMonthly((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5,(bool const &)*arg6,(bool const &)*arg7);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateMonthly_1Env(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  bool *arg6 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  bool temp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  (arg1)->updateMonthly_Env((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5,(bool const &)*arg6);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateMonthly_1Bgc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  bool *arg6 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  bool temp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  (arg1)->updateMonthly_Bgc((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5,(bool const &)*arg6);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateMonthly_1Fir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->updateMonthly_Fir((int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateMonthly_1Dsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateMonthly_Dsl((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1getLitterFallRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Cohort *arg1 = (Cohort *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->getLitterFallRatio(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSiteDlyOutputBuffer_1Env(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateSiteDlyOutputBuffer_Env((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSiteMlyOutputBuffer_1Env(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateSiteMlyOutputBuffer_Env((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSiteMlyOutputBuffer_1Bgc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateSiteMlyOutputBuffer_Bgc((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSiteYlyOutputBuffer_1Env(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->updateSiteYlyOutputBuffer_Env();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSiteYlyOutputBuffer_1Bgc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->updateSiteYlyOutputBuffer_Bgc();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSiteYlyOutputBuffer_1Fir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->updateSiteYlyOutputBuffer_Fir();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateRestartOutputBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateRestartOutputBuffer((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateRegionalOutputBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateRegionalOutputBuffer((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSclmOutputBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateSclmOutputBuffer((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  if (arg1) (arg1)->ed = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (EnvData *) ((arg1)->ed);
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1bd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  BgcData *arg2 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(BgcData **)&jarg2; 
  if (arg1) (arg1)->bd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1bd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  BgcData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (BgcData *) ((arg1)->bd);
  *(BgcData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  FirData *arg2 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(FirData **)&jarg2; 
  if (arg1) (arg1)->fd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  FirData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (FirData *) ((arg1)->fd);
  *(FirData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1md_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  if (arg1) (arg1)->md = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1md_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  ModelData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (ModelData *) ((arg1)->md);
  *(ModelData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (GridData *) ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (CohortData *) ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RestartData *arg2 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RestartData **)&jarg2; 
  if (arg1) (arg1)->resid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  RestartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (RestartData *)& ((arg1)->resid);
  *(RestartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sitein_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  SiteIn *arg2 = (SiteIn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(SiteIn **)&jarg2; 
  if (arg1) (arg1)->sitein = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sitein_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  SiteIn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (SiteIn *)& ((arg1)->sitein);
  *(SiteIn **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1atmod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  AtmOutData *arg2 = (AtmOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(AtmOutData **)&jarg2; 
  if (arg1) (arg1)->atmod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1atmod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  AtmOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (AtmOutData *) ((arg1)->atmod);
  *(AtmOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vegod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  VegOutData *arg2 = (VegOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(VegOutData **)&jarg2; 
  if (arg1) (arg1)->vegod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vegod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  VegOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (VegOutData *) ((arg1)->vegod);
  *(VegOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sslod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  SnowSoilOutData *arg2 = (SnowSoilOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(SnowSoilOutData **)&jarg2; 
  if (arg1) (arg1)->sslod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sslod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  SnowSoilOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (SnowSoilOutData *) ((arg1)->sslod);
  *(SnowSoilOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1regnod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RegnOutData *arg2 = (RegnOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RegnOutData **)&jarg2; 
  if (arg1) (arg1)->regnod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1regnod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  RegnOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (RegnOutData *) ((arg1)->regnod);
  *(RegnOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RestartData *arg2 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RestartData **)&jarg2; 
  if (arg1) (arg1)->resod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  RestartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (RestartData *) ((arg1)->resod);
  *(RestartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sclmod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  SoilClm *arg2 = (SoilClm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(SoilClm **)&jarg2; 
  if (arg1) (arg1)->sclmod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1sclmod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  SoilClm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (SoilClm *) ((arg1)->sclmod);
  *(SoilClm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1veupdateLAI5Vegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->veupdateLAI5Vegc = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1veupdateLAI5Vegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->veupdateLAI5Vegc);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1veenvlai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->veenvlai;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_Cohort_1veenvlai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (double *)(double *) ((arg1)->veenvlai);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resetBgcPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Cohort *arg1 = (Cohort *) 0 ;
  vegpar_bgc *arg2 = (vegpar_bgc *) 0 ;
  soipar_bgc *arg3 = (soipar_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(vegpar_bgc **)&jarg2; 
  arg3 = *(soipar_bgc **)&jarg3; 
  (arg1)->resetBgcPar(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1getBgcPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Cohort *arg1 = (Cohort *) 0 ;
  vegpar_bgc *arg2 = (vegpar_bgc *) 0 ;
  soipar_bgc *arg3 = (soipar_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(vegpar_bgc **)&jarg2; 
  arg3 = *(soipar_bgc **)&jarg3; 
  (arg1)->getBgcPar(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resetCalPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Cohort *arg1 = (Cohort *) 0 ;
  vegpar_cal *arg2 = (vegpar_cal *) 0 ;
  soipar_cal *arg3 = (soipar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(vegpar_cal **)&jarg2; 
  arg3 = *(soipar_cal **)&jarg3; 
  (arg1)->resetCalPar(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1getCalPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Cohort *arg1 = (Cohort *) 0 ;
  vegpar_cal *arg2 = (vegpar_cal *) 0 ;
  soipar_cal *arg3 = (soipar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(vegpar_cal **)&jarg2; 
  arg3 = *(soipar_cal **)&jarg3; 
  (arg1)->getCalPar(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setSiteStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  SiteIn *arg2 = (SiteIn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(SiteIn **)&jarg2; 
  (arg1)->setSiteStates(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1getSiteStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  SiteIn *arg2 = (SiteIn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(SiteIn **)&jarg2; 
  (arg1)->getSiteStates(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateSoilLayerType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 ;
  int *arg3 ;
  jint *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->updateSoilLayerType(arg2,arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Controller(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Controller *)new Controller();
  *(Controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Controller *arg1 = (Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Controller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1controlfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Controller *arg1 = (Controller *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->controlfile = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Controller_1controlfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result =  ((arg1)->controlfile);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1ctrl4calirun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Controller *arg1 = (Controller *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Controller **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  (arg1)->ctrl4calirun(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1ctrl4siterun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Controller *arg1 = (Controller *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Controller **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  (arg1)->ctrl4siterun(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1ctrl4regnrun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Controller *arg1 = (Controller *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Controller **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  (arg1)->ctrl4regnrun(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1setControlfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Controller *arg1 = (Controller *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setControlfile(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Grid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Grid *)new Grid();
  *(Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Grid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Grid *arg1 = (Grid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Grid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1gid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Grid *arg1 = (Grid *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Grid_1gid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (int) ((arg1)->gid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Grid_1reinit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)(arg1)->reinit((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1setEnvData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  (arg1)->setEnvData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1setRegionData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  (arg1)->setRegionData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1setGridData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  (arg1)->setGridData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1atm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Grid *arg1 = (Grid *) 0 ;
  Atmosphere arg2 ;
  Atmosphere *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  argp2 = *(Atmosphere **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Atmosphere");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->atm = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1atm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  Atmosphere result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result =  ((arg1)->atm);
  *(Atmosphere **)&jresult = new Atmosphere((const Atmosphere &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1ed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  if (arg1) (arg1)->ed = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1ed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (EnvData *) ((arg1)->ed);
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (GridData *) ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1ModelData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ModelData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ModelData *)new ModelData();
  *(ModelData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1ModelData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModelData *arg1 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runeq = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runeq);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runsp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runsp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runtr = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runtr);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runsc = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runsc);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeco2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->changeco2 = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeco2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->changeco2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeclimate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->changeclimate = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeclimate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->changeclimate);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1useseverity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useseverity = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1useseverity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->useseverity);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1myid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->myid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1myid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->myid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1numprocs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numprocs = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1numprocs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->numprocs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->initmode = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->initmode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1consoledebug_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->consoledebug = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1consoledebug_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->consoledebug);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->outputdir = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->outputdir);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1casename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->casename = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1casename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->casename);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1cctypes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->cctypes = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1cctypes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->cctypes);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1reginputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->reginputdir = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1reginputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->reginputdir);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1grdinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->grdinputdir = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1grdinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->grdinputdir);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runchtfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->runchtfile = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runchtfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->runchtfile);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->initmodes = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->initmodes);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runstages_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->runstages = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runstages_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->runstages);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initialfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->initialfile = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initialfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->initialfile);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1eqchtinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->eqchtinputdir = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1eqchtinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->eqchtinputdir);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1spchtinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->spchtinputdir = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1spchtinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->spchtinputdir);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1trchtinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->trchtinputdir = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1trchtinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->trchtinputdir);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1calibrationdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->calibrationdir = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_ModelData_1calibrationdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result =  ((arg1)->calibrationdir);
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1checking4run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ModelData *arg1 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  (arg1)->checking4run();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1joutputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->joutputdir) delete [] arg1->joutputdir;
    if (arg2) {
      arg1->joutputdir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->joutputdir, (const char *)arg2);
    } else {
      arg1->joutputdir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1joutputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->joutputdir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jcasename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jcasename) delete [] arg1->jcasename;
    if (arg2) {
      arg1->jcasename = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jcasename, (const char *)arg2);
    } else {
      arg1->jcasename = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jcasename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jcasename);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jcctypes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jcctypes) delete [] arg1->jcctypes;
    if (arg2) {
      arg1->jcctypes = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jcctypes, (const char *)arg2);
    } else {
      arg1->jcctypes = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jcctypes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jcctypes);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jreginputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jreginputdir) delete [] arg1->jreginputdir;
    if (arg2) {
      arg1->jreginputdir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jreginputdir, (const char *)arg2);
    } else {
      arg1->jreginputdir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jreginputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jreginputdir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jgrdinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jgrdinputdir) delete [] arg1->jgrdinputdir;
    if (arg2) {
      arg1->jgrdinputdir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jgrdinputdir, (const char *)arg2);
    } else {
      arg1->jgrdinputdir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jgrdinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jgrdinputdir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jrunchtfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jrunchtfile) delete [] arg1->jrunchtfile;
    if (arg2) {
      arg1->jrunchtfile = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jrunchtfile, (const char *)arg2);
    } else {
      arg1->jrunchtfile = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jrunchtfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jrunchtfile);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jinitmodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jinitmodes) delete [] arg1->jinitmodes;
    if (arg2) {
      arg1->jinitmodes = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jinitmodes, (const char *)arg2);
    } else {
      arg1->jinitmodes = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jinitmodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jinitmodes);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jrunstages_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jrunstages) delete [] arg1->jrunstages;
    if (arg2) {
      arg1->jrunstages = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jrunstages, (const char *)arg2);
    } else {
      arg1->jrunstages = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jrunstages_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jrunstages);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jinitialfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jinitialfile) delete [] arg1->jinitialfile;
    if (arg2) {
      arg1->jinitialfile = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jinitialfile, (const char *)arg2);
    } else {
      arg1->jinitialfile = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jinitialfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jinitialfile);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jeqchtinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jeqchtinputdir) delete [] arg1->jeqchtinputdir;
    if (arg2) {
      arg1->jeqchtinputdir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jeqchtinputdir, (const char *)arg2);
    } else {
      arg1->jeqchtinputdir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jeqchtinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jeqchtinputdir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jspchtinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jspchtinputdir) delete [] arg1->jspchtinputdir;
    if (arg2) {
      arg1->jspchtinputdir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jspchtinputdir, (const char *)arg2);
    } else {
      arg1->jspchtinputdir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jspchtinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jspchtinputdir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jtrchtinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jtrchtinputdir) delete [] arg1->jtrchtinputdir;
    if (arg2) {
      arg1->jtrchtinputdir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jtrchtinputdir, (const char *)arg2);
    } else {
      arg1->jtrchtinputdir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jtrchtinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jtrchtinputdir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jcalibrationdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->jcalibrationdir) delete [] arg1->jcalibrationdir;
    if (arg2) {
      arg1->jcalibrationdir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->jcalibrationdir, (const char *)arg2);
    } else {
      arg1->jcalibrationdir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1jcalibrationdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (char *) ((arg1)->jcalibrationdir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1stringtochar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ModelData *arg1 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  (arg1)->stringtochar();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1RegnOutData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RegnOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RegnOutData *)new RegnOutData();
  *(RegnOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1RegnOutData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RegnOutData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1chtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1chtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (int) ((arg1)->chtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (int) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ysf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ysf = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ysf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->ysf);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1outvarlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 54) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->outvarlist;
    for (ii = 0; ii < (size_t)54; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1outvarlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (int *)(int *) ((arg1)->outvarlist);
  jresult = SWIG_JavaArrayOutInt(jenv, result, 54); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1burnthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->burnthick = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1burnthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->burnthick);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1burnsoic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->burnsoic = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1burnsoic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->burnsoic);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1burnvegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->burnvegc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1burnvegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->burnvegc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1growstart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->growstart = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1growstart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->growstart);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1growend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->growend = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1growend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->growend);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1perm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->perm = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1perm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->perm);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1mossdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mossdz = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1mossdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->mossdz);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1shlwdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shlwdz = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1shlwdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->shlwdz);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1deepdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->deepdz = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1deepdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float) ((arg1)->deepdz);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->lai;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->lai);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vegc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vegc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vegn;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vegn);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1gpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->gpp;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1gpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->gpp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1npp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->npp;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1npp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->npp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1rh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rh;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1rh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rh);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ltrfalc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ltrfalc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ltrfalc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ltrfalc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ltrfaln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ltrfaln;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ltrfaln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ltrfaln);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1shlwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->shlwc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1shlwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->shlwc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1deepc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->deepc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1deepc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->deepc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1minec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->minec;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1minec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->minec);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->orgn;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->orgn);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->avln;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->avln);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1netnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->netnmin;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1netnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->netnmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1nuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nuptake;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1nuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nuptake);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ninput;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ninput);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1nlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nlost;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1nlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nlost);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1eet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->eet;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1eet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->eet);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->pet;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->pet);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1qdrain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->qdrain;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1qdrain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->qdrain);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1qrunoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->qrunoff;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1qrunoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->qrunoff);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1snowthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snowthick;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1snowthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->snowthick);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1swe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->swe;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1swe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->swe);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1wtd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->wtd;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1wtd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->wtd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ald;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1ald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ald);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vwcshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vwcshlw);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vwcdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vwcdeep);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcminetop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vwcminetop;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcminetop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vwcminetop);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcminebot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vwcminebot;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcminebot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vwcminebot);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tshlw);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tdeep);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tminetop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tminetop;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tminetop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tminetop);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tminebot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tminebot;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tminebot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tminebot);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->hkshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->hkshlw);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->hkdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->hkdeep);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkminetop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->hkminetop;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkminetop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->hkminetop);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkminebot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->hkminebot;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1hkminebot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->hkminebot);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcshlw);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcdeep);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcminetop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcminetop;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcminetop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcminetop);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcminebot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcminebot;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tcminebot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcminebot);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1trock34_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->trock34;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1trock34_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->trock34);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1somcald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->somcald;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1somcald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->somcald);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vwcald;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1vwcald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vwcald);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tald;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegnOutData_1tald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegnOutData *arg1 = (RegnOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegnOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tald);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1SiteIn(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SiteIn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SiteIn *)new SiteIn();
  *(SiteIn **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1SiteIn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SiteIn **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1siteid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->siteid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1siteid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (int) ((arg1)->siteid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1ysf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ysf = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1ysf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (int) ((arg1)->ysf);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->lai;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float *)(float *) ((arg1)->lai);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1vegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vegc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1vegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->vegc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1vegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vegn = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1vegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->vegn);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1mossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mossthick = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1mossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->mossthick);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1fibthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fibthick = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1fibthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->fibthick);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1humthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->humthick = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1humthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->humthick);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1soilc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->soilc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1soilc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->soilc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1fibc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fibc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1fibc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->fibc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1humc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->humc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1humc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->humc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1minc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1minc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->minc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->orgn);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->avln = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float) ((arg1)->avln);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1mintype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_MIN_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->mintype;
    for (ii = 0; ii < (size_t)MAX_MIN_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1mintype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (int *)(int *) ((arg1)->mintype);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_MIN_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1initz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->initz;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1initz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float *)(float *) ((arg1)->initz);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1initst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->initst;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1initst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float *)(float *) ((arg1)->initst);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1initsm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->initsm;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SiteIn_1initsm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SiteIn *arg1 = (SiteIn *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SiteIn **)&jarg1; 
  result = (float *)(float *) ((arg1)->initsm);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1SnowSoilOutData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SnowSoilOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SnowSoilOutData *)new SnowSoilOutData();
  *(SnowSoilOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1SnowSoilOutData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1errord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->errord = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1errord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (int) ((arg1)->errord);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1infild_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->infild;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1infild_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->infild);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1wtd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->wtd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1wtd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->wtd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1fsatd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->fsatd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1fsatd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->fsatd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1qoverd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->qoverd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1qoverd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->qoverd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1qdraind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->qdraind;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1qdraind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->qdraind);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1growd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->growd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1growd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->growd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1slradrefld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->slradrefld;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1slradrefld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->slradrefld);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1sevapd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sevapd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1sevapd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sevapd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tsd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->tsd);
    int ii = 0;
    for (; ii < DYINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tsd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->tsd);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tcondd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->tcondd);
    int ii = 0;
    for (; ii < DYINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tcondd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->tcondd);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liqd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->liqd);
    int ii = 0;
    for (; ii < DYINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liqd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->liqd);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1iced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->iced);
    int ii = 0;
    for (; ii < DYINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1iced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->iced);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1frzfnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_NUM_FNT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_NUM_FNT])&jarg2; 
  {
    float (*inp)[MAX_NUM_FNT] = (float (*)[MAX_NUM_FNT])(arg2);
    float (*dest)[MAX_NUM_FNT] = (float (*)[MAX_NUM_FNT])(arg1->frzfnt);
    int ii = 0;
    for (; ii < DYINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_NUM_FNT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1frzfnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_NUM_FNT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_NUM_FNT])(float (*)[MAX_NUM_FNT]) ((arg1)->frzfnt);
  *(float (**)[MAX_NUM_FNT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1thwfnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_NUM_FNT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_NUM_FNT])&jarg2; 
  {
    float (*inp)[MAX_NUM_FNT] = (float (*)[MAX_NUM_FNT])(arg2);
    float (*dest)[MAX_NUM_FNT] = (float (*)[MAX_NUM_FNT])(arg1->thwfnt);
    int ii = 0;
    for (; ii < DYINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_NUM_FNT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1thwfnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_NUM_FNT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_NUM_FNT])(float (*)[MAX_NUM_FNT]) ((arg1)->thwfnt);
  *(float (**)[MAX_NUM_FNT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1numiter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->numiter;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1numiter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->numiter);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1numiterliq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->numiterliq;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1numiterliq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->numiterliq);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1snowthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snowthick;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1snowthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->snowthick);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1swed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->swed;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1swed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->swed);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1smeltd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->smeltd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1smeltd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->smeltd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ssubld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ssubld;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ssubld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ssubld);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1snradrefld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snradrefld;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1snradrefld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->snradrefld);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1aldd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->aldd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1aldd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->aldd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1errorm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->errorm = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1errorm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (int) ((arg1)->errorm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1dz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->dz);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1dz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->dz);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->ts);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->ts);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->liq);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->liq);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1vwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->vwc);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1vwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->vwc);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->ice);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->ice);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ald;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ald);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ssubl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ssubl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ssubl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ssubl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1sninfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sninfl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1sninfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sninfl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1sevap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sevap;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1sevap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sevap);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1watertab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->watertab;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1watertab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->watertab);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1mossdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->mossdz;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1mossdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->mossdz);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1shlwdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->shlwdz;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1shlwdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->shlwdz);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1deepdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->deepdz;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1deepdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->deepdz);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->z);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->z);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1por_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->por);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1por_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->por);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->type);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->type);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1reac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->reac);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1reac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->reac);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nonc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->nonc);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nonc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->nonc);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rrh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->rrh);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rrh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->rrh);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nrh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->nrh);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nrh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->nrh);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhmoist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->rhmoist);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhmoist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->rhmoist);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->rhq10);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->rhq10);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ksoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->ksoil);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ksoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->ksoil);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->kdl);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->kdl);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->kdr);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->kdr);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*arg2)[MAX_OUT_SOI] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = *(float (**)[MAX_OUT_SOI])&jarg2; 
  {
    float (*inp)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg2);
    float (*dest)[MAX_OUT_SOI] = (float (*)[MAX_OUT_SOI])(arg1->kdn);
    int ii = 0;
    for (; ii < MINY; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      int jj = 0;
      for (; jj < MAX_OUT_SOI; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float (*result)[MAX_OUT_SOI] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float (*)[MAX_OUT_SOI])(float (*)[MAX_OUT_SOI]) ((arg1)->kdn);
  *(float (**)[MAX_OUT_SOI])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ninput;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ninput);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nlost;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nlost);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1netnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->netnmin;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1netnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->netnmin);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nimmob_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nimmob;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nimmob_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nimmob);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->orgn;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->orgn);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->avln;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->avln);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1reacsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->reacsum;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1reacsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->reacsum);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1noncsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->noncsum;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1noncsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->noncsum);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1shlwcsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->shlwcsum;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1shlwcsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->shlwcsum);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1deepcsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->deepcsum;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1deepcsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->deepcsum);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1minecsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->minecsum;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1minecsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->minecsum);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1growpct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->growpct;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1growpct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->growpct);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1errory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->errory = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1errory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (int) ((arg1)->errory);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrsevap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrsevap = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrsevap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrsevap);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrqover_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrqover = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrqover_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrqover);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrqdrain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrqdrain = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrqdrain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrqdrain);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrssubl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrssubl = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrssubl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrssubl);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrliqsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrliqsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrliqsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrliqsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yricesum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yricesum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yricesum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yricesum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtsave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrtsave = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtsave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrtsave);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcmin10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrvwcmin10 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcmin10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrvwcmin10);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrvwcshlw = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrvwcshlw);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrvwcdeep = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrvwcdeep);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcmine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrvwcmine = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrvwcmine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrvwcmine);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtmin10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrtmin10 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtmin10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrtmin10);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrtshlw = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrtshlw);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrtdeep = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrtdeep);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtmine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrtmine = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrtmine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrtmine);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrald = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrald);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrperm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrperm = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrperm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrperm);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrmossdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrmossdz = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrmossdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrmossdz);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrshlwdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrshlwdz = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrshlwdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrshlwdz);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrdeepdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrdeepdz = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrdeepdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrdeepdz);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrwatertab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrwatertab = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrwatertab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrwatertab);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrmossnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrmossnum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrmossnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrmossnum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrshlwnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrshlwnum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrshlwnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrshlwnum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrdeepnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrdeepnum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrdeepnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrdeepnum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnetnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrnetnmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnetnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrnetnmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrrrhsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrrrhsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrrrhsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrrrhsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnrhsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrnrhsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnrhsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrnrhsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrreacsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrreacsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrreacsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrreacsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnoncsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrnoncsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnoncsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrnoncsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrshlwcsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrshlwcsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrshlwcsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrshlwcsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrdeepcsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrdeepcsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrdeepcsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrdeepcsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrminecsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrminecsum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrminecsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrminecsum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrorgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrorgn = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrorgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrorgn);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yravln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yravln = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yravln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yravln);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrsnuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrsnuptake = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrsnuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrsnuptake);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrwdebris_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrwdebris = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrwdebris_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrwdebris);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrwdrh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrwdrh = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrwdrh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrwdrh);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrninput = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrninput);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrnlost = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrnlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrnlost);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrburnthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrburnthick = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrburnthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrburnthick);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrburnsoilc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrburnsoilc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrburnsoilc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrburnsoilc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrburnsoiln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrburnsoiln = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrburnsoiln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrburnsoiln);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrorgnreturn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrorgnreturn = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1yrorgnreturn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float) ((arg1)->yrorgnreturn);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ts1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ts1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ts1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ts1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liq1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->liq1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liq1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->liq1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1vwc1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vwc1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1vwc1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vwc1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ice1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ice1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ice1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ice1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1dz1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->dz1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1dz1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->dz1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1z1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->z1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1z1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->z1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1por1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->por1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1por1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->por1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1type1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->type1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1type1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->type1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1reac1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->reac1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1reac1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->reac1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rrh1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rrh1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rrh1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rrh1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nonc1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nonc1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nonc1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nonc1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nrh1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nrh1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1nrh1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nrh1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhmoist1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rhmoist1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhmoist1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rhmoist1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhq101D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rhq101D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1rhq101D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rhq101D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ksoil1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ksoil1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1ksoil1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ksoil1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdl1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->kdl1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdl1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->kdl1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdr1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->kdr1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdr1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->kdr1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdn1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->kdn1D;
    for (ii = 0; ii < (size_t)MINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1kdn1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->kdn1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1snz1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY*MAX_OUT_SNW) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->snz1D;
    for (ii = 0; ii < (size_t)DYINY*MAX_OUT_SNW; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1snz1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->snz1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY*MAX_OUT_SNW); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1frzfnt1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY*MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->frzfnt1D;
    for (ii = 0; ii < (size_t)DYINY*MAX_NUM_FNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1frzfnt1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->frzfnt1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY*MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1thwfnt1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY*MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->thwfnt1D;
    for (ii = 0; ii < (size_t)DYINY*MAX_NUM_FNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1thwfnt1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->thwfnt1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY*MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liqd1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->liqd1D;
    for (ii = 0; ii < (size_t)DYINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1liqd1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->liqd1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tcondd1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcondd1D;
    for (ii = 0; ii < (size_t)DYINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tcondd1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcondd1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1iced1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->iced1D;
    for (ii = 0; ii < (size_t)DYINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1iced1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->iced1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tsd1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY*MAX_OUT_SOI) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tsd1D;
    for (ii = 0; ii < (size_t)DYINY*MAX_OUT_SOI; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SnowSoilOutData_1tsd1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SnowSoilOutData *arg1 = (SnowSoilOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SnowSoilOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tsd1D);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY*MAX_OUT_SOI); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Timer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Timer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Timer *)new Timer();
  *(Timer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Timer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Timer *arg1 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Timer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1dinm_1set(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  int *arg1 ;
  jint *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (jarg1 && jenv->GetArrayLength(jarg1) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr1, &arg1, jarg1)) return ; 
  {
    size_t ii;
    int *b = (int *) Timer::dinm;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((int *) arg1 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr1, arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_Timer_1dinm_1get(JNIEnv *jenv, jclass jcls) {
  jintArray jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)Timer::dinm;
  jresult = SWIG_JavaArrayOutInt(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1doyindfst_1set(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  int *arg1 ;
  jint *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (jarg1 && jenv->GetArrayLength(jarg1) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr1, &arg1, jarg1)) return ; 
  {
    size_t ii;
    int *b = (int *) Timer::doyindfst;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((int *) arg1 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr1, arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_Timer_1doyindfst_1get(JNIEnv *jenv, jclass jcls) {
  jintArray jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)Timer::doyindfst;
  jresult = SWIG_JavaArrayOutInt(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinfinished_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spinfinished = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinfinished_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (bool) ((arg1)->spinfinished);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1yearind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yearind = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1yearind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->yearind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1monind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->monind = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1monind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->monind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1maxeqrunyrs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxeqrunyrs = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1maxeqrunyrs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->maxeqrunyrs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinbegyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spinbegyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinbegyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->spinbegyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinendyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spinendyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinendyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->spinendyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinnumyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spinnumyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1spinnumyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->spinnumyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1trsbegyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trsbegyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1trsbegyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->trsbegyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1trsendyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trsendyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1trsendyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->trsendyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1trsnumyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trsnumyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1trsnumyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->trsnumyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1scbegyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scbegyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1scbegyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->scbegyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1scendyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scendyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1scendyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->scendyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1scnumyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scnumyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1scnumyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->scnumyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1outbegyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->outbegyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1outbegyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->outbegyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1outendyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->outendyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1outendyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->outendyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1dlyinterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dlyinterval = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1dlyinterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->dlyinterval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1numrunyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numrunyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1numrunyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->numrunyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getInputYearIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getInputYearIndex(*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getOutputYearIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg4 = *(bool **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getOutputYearIndex(*arg2,*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getDOYIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->getDOYIndex((int const &)*arg2,(int const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Timer *arg1 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getTranNumberOfYears(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getTranNumberOfYears();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getScenNumberOfYears(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getScenNumberOfYears();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getDaysInMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getDaysInMonth(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getCurrentMonthIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getCurrentMonthIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getNextMonthIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getNextMonthIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getCurrentYearIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getCurrentYearIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1advanceOneMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Timer *arg1 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  (arg1)->advanceOneMonth();
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getCalendarYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getCalendarYear(*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1VegOutData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VegOutData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VegOutData *)new VegOutData();
  *(VegOutData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1VegOutData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VegOutData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sinterd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sinterd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sinterd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sinterd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rinterd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rinterd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rinterd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rinterd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sthfld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sthfld;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sthfld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sthfld);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rthfld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rthfld;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rthfld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rthfld);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sdripd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sdripd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sdripd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sdripd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rdripd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rdripd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rdripd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rdripd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1scanopyd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->scanopyd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1scanopyd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->scanopyd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rcanopyd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rcanopyd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rcanopyd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rcanopyd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1cansubd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->cansubd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1cansubd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->cansubd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1canevpd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->canevpd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1canevpd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->canevpd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1cantrsd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->cantrsd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1cantrsd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->cantrsd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1racd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->racd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1racd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->racd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1radrefld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->radrefld;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1radrefld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->radrefld);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1radthroud_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->radthroud;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1radthroud_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->radthroud);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1btrand_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->btrand;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1btrand_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->btrand);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1m_1ppfdd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->m_ppfdd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1m_1ppfdd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_ppfdd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1m_1vpdd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->m_vpdd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1m_1vpdd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_vpdd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ccd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != DYINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ccd;
    for (ii = 0; ii < (size_t)DYINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ccd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ccd);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, DYINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1btran_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->btran;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1btran_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->btran);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rc;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rac;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rac);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1trans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->trans;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1trans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->trans);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1vevap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vevap;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1vevap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vevap);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1vsubl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vsubl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1vsubl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vsubl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rinter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rinter;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rinter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rinter);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sinter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sinter;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sinter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sinter);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rthfl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rthfl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->sthfl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1sthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->sthfl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1radthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->radthfl;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1radthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->radthfl);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1vegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vegc;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1vegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vegc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1strn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->strn;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1strn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->strn);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ston_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ston;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ston_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ston);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ingpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ingpp;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ingpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ingpp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1gpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->gpp;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1gpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->gpp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1innpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->innpp;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1innpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->innpp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1npp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->npp;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1npp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->npp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rm;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rm);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->rg;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1rg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->rg);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ltrfalc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ltrfalc;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ltrfalc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ltrfalc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ltrfaln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->ltrfaln;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1ltrfaln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->ltrfaln);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1innuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->innuptake;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1innuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->innuptake);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1nuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nuptake;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1nuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nuptake);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1luptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->luptake;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1luptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->luptake);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1suptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->suptake;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1suptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->suptake);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1nresorb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nresorb;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1nresorb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nresorb);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1nmobil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nmobil;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1nmobil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nmobil);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->lai;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->lai);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1fpc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->fpc;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1fpc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->fpc);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1unnormleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->unnormleaf;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1unnormleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->unnormleaf);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1leaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->leaf;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1leaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->leaf);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1foliage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MINY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->foliage;
    for (ii = 0; ii < (size_t)MINY; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1foliage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float *)(float *) ((arg1)->foliage);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MINY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrevapo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrevapo = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrevapo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrevapo);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrsublim_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrsublim = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrsublim_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrsublim);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrtrans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrtrans = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrtrans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrtrans);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrc2n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrc2n = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrc2n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrc2n);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrnpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrnpp = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrnpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrnpp);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrrg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrrg = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrrg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrrg);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrrm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrrm = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrrm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrrm);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrltrfalc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrltrfalc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrltrfalc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrltrfalc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrltrfaln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrltrfaln = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrltrfaln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrltrfaln);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrvnuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrvnuptake = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrvnuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrvnuptake);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrabvgndc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrabvgndc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrabvgndc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrabvgndc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrfoliage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrfoliage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrfoliage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrfoliage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrleaf = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrleaf);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrlai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrlai = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrlai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrlai);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrfpc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrfpc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrfpc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrfpc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrvegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrvegc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrvegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrvegc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrstrn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrstrn = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrstrn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrstrn);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrston_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrston = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrston_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrston);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrburnorgc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrburnorgc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrburnorgc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrburnorgc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrburnorgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  VegOutData *arg1 = (VegOutData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yrburnorgn = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_VegOutData_1yrburnorgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  VegOutData *arg1 = (VegOutData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VegOutData **)&jarg1; 
  result = (float) ((arg1)->yrburnorgn);
  jresult = (jfloat)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

